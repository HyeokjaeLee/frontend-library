{"version":3,"file":"index-412a6d3e.js","sources":["../../../src/constants/INITIAL.ts","../../../src/hooks/private/useMountedEffect.tsx","../../../src/hooks/private/useToastDynamicHeight.tsx","../../../src/hooks/private/useToastState.tsx","../../../src/contexts/ValidationContext.tsx","../../../src/hooks/private/useValidateMessage.tsx","../../../src/hooks/private/useButtonDelay.tsx","../../../src/hooks/private/useFormatInputValue.tsx","../../../src/hooks/private/useInputMessageDynamicHeight.tsx","../../../src/hooks/private/useIndexForSelect.tsx","../../../src/hooks/private/useSelectOpenStatus.tsx","../../../src/contexts/ToastContext.tsx","../../../src/hooks/public/useValidate.tsx","../../../src/hooks/public/useDarkMode.tsx","../../../src/utils/cleanClassName.ts","../../../src/utils/createValidationStore.tsx"],"sourcesContent":["export const INDEX = -1;\n","import { useEffect as createEffect, useRef } from 'react';\n\nexport function useMountedEffect(\n  effect: React.EffectCallback,\n  deps?: React.DependencyList,\n) {\n  const isMounted = useRef(false);\n\n  createEffect(\n    isMounted.current\n      ? effect\n      : () => {\n          isMounted.current = true;\n        },\n    deps,\n  );\n}\n","import { useRef, useState } from 'react';\n\nimport { useMountedEffect } from './useMountedEffect';\n\nexport const useToastDynamicHeight = (hasSpace: boolean) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [height, setHeight] = useState<React.CSSProperties>();\n\n  useMountedEffect(\n    () =>\n      setHeight(() => {\n        if (ref.current) {\n          return {\n            height: ref.current.clientHeight,\n          };\n        }\n\n        return {\n          height: 'fit-content',\n        };\n      }),\n    [hasSpace],\n  );\n\n  return {\n    dynamicHeight: hasSpace ? height : undefined,\n    toastContentRef: ref,\n  };\n};\n","import { useState, useEffect } from 'react';\n\nexport enum TOAST_STATE {\n  OPENING = 'opening',\n  OPENED = 'opened',\n  HOLDING = 'holding',\n  CLOSING = 'closing',\n  CLOSED = 'closed',\n  DELETED = 'deleted',\n}\n\ninterface UseToastStateParams {\n  holdTime: number;\n  space: boolean;\n}\n\nconst CLOSING_ANIMATION_DURATION = 300;\n\nexport const useToastState = ({ holdTime, space }: UseToastStateParams) => {\n  const [toastState, setToastState] = useState<TOAST_STATE>(\n    TOAST_STATE.OPENING,\n  );\n\n  useEffect(() => {\n    switch (toastState) {\n      case TOAST_STATE.OPENING:\n        setTimeout(() => setToastState(TOAST_STATE.OPENED));\n        break;\n\n      case TOAST_STATE.OPENED: {\n        const holdTimer = setTimeout(\n          () => setToastState(TOAST_STATE.CLOSING),\n          holdTime,\n        );\n\n        return () => clearTimeout(holdTimer);\n      }\n\n      case TOAST_STATE.CLOSING: {\n        const closeTimer = setTimeout(\n          () => setToastState(TOAST_STATE.CLOSED),\n          CLOSING_ANIMATION_DURATION,\n        );\n\n        return () => clearTimeout(closeTimer);\n      }\n    }\n  }, [holdTime, toastState]);\n\n  useEffect(() => {\n    if (toastState === TOAST_STATE.CLOSED && !space)\n      setToastState(TOAST_STATE.DELETED);\n  }, [space, toastState]);\n\n  const isToastHoldable = [\n    TOAST_STATE.OPENED,\n    TOAST_STATE.HOLDING,\n    TOAST_STATE.CLOSING,\n  ].includes(toastState);\n\n  const hasSpace =\n    [TOAST_STATE.OPENED, TOAST_STATE.HOLDING].includes(toastState) ||\n    ([TOAST_STATE.CLOSING, TOAST_STATE.CLOSED].includes(toastState) && space);\n\n  return {\n    toastState,\n    hasSpace,\n\n    holdToast: () => {\n      if (isToastHoldable) setToastState(TOAST_STATE.HOLDING);\n    },\n    unholdToast: () => {\n      if (isToastHoldable) setToastState(TOAST_STATE.OPENED);\n    },\n  };\n};\n","import { createContext, useContext, useRef } from 'react';\n\ntype ValidationContextValue = Map<string, () => string | undefined>;\n\nconst ValidationContext = createContext<ValidationContextValue | undefined>(\n  undefined,\n);\n\ninterface ValidationContextProviderProps {\n  children: React.ReactNode;\n}\n\nexport const ValidationContextProvider = ({\n  children,\n}: ValidationContextProviderProps) => {\n  const { current } = useRef(new Map());\n\n  return (\n    <ValidationContext.Provider value={current}>\n      {children}\n    </ValidationContext.Provider>\n  );\n};\n\nexport const useValidationContext = () => {\n  const context = useContext(ValidationContext);\n\n  return {\n    validationMap: context,\n  };\n};\n","import { useCallback, useState, useEffect } from 'react';\n\nimport { useValidationContext } from '@contexts/ValidationContext';\n\nexport type ValidateHandler<TValue> =\n  | ((value: TValue) => string | undefined)\n  | undefined;\n\ninterface UseValidationMessageParams<TValue> {\n  id?: string;\n  value: TValue;\n  validateHandler: ValidateHandler<TValue>;\n}\n\nexport const useValidationMessage = <TValue,>({\n  id,\n  value,\n  validateHandler,\n}: UseValidationMessageParams<TValue>) => {\n  const { validationMap } = useValidationContext();\n\n  const [validationMessage, setValidationMessage] = useState<string>();\n\n  const validateValue = useCallback(\n    (value: TValue) => setValidationMessage(validateHandler?.(value)),\n    [validateHandler],\n  );\n\n  useEffect(() => {\n    if (validationMap && id && validateHandler) {\n      validationMap.set(id, () => {\n        const validationMessage = validateHandler(value);\n        setValidationMessage(validationMessage);\n        return validationMessage;\n      });\n\n      return () => {\n        validationMap.delete(id);\n      };\n    }\n  }, [id, validateHandler, validationMap, value]);\n\n  return {\n    validationMessage,\n    validateValue,\n  };\n};\n","import { useState, useEffect } from 'react';\n\ninterface UseButtonDelayParams {\n  delay?: number;\n  disabled?: boolean;\n}\n\nexport const useButtonDelay = ({ delay, disabled }: UseButtonDelayParams) => {\n  const [delayState, setDelayState] = useState<'before' | 'delaying' | 'after'>(\n    'after',\n  );\n\n  useEffect(() => {\n    if (!disabled && delay) {\n      setDelayState('before');\n      const startTimer = setTimeout(() => setDelayState('delaying'));\n      const endTimer = setTimeout(() => setDelayState('after'), delay);\n      return () => {\n        clearTimeout(startTimer);\n        clearTimeout(endTimer);\n      };\n    }\n  }, [delay, disabled]);\n\n  const isDelaying = delayState === 'delaying';\n  const isDelayButton = delayState === 'before' || isDelaying;\n\n  return {\n    isDelaying,\n    isDelayButton,\n  };\n};\n","import { useState } from 'react';\n\nexport type InputType =\n  | 'text'\n  | 'number'\n  | 'large-number'\n  | 'phone-number'\n  | 'password'\n  | 'button';\n\ninterface UseFormatInputValueParams {\n  value?: string | number;\n  type?: InputType;\n  placeholder?: string;\n}\n\nexport const useFormatInputValue = ({\n  value,\n  type,\n  placeholder = '',\n}: UseFormatInputValueParams) => {\n  const [isFormattedValue, setIsFormattedValue] = useState(true);\n\n  const formatValue = () => {\n    if (type === 'button' && !value) return placeholder;\n\n    if (value !== 0 && !value) return '';\n\n    const valueString = String(value);\n\n    if (!isFormattedValue) return valueString;\n\n    switch (type) {\n      case 'number':\n        return valueString;\n\n      case 'large-number':\n        return Number(valueString).toLocaleString();\n\n      case 'phone-number':\n        if (valueString.length === 10)\n          return valueString.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3');\n        return valueString.replace(/(\\d{3})(\\d{4})(\\d{4})/, '$1-$2-$3');\n\n      default:\n        return valueString;\n    }\n  };\n\n  const convertChangeHandlerParam = (value: string) => {\n    switch (type) {\n      case 'number':\n      case 'large-number': {\n        const isValidNumber = value === '-' || !Number.isNaN(Number(value));\n        return value && (isValidNumber ? value : null);\n      }\n\n      case 'phone-number': {\n        let numberString = value.replace(/[^0-9]/g, '');\n        if (numberString.length > 11) numberString = numberString.slice(0, 11);\n\n        return value && numberString;\n      }\n\n      default:\n        return value;\n    }\n  };\n\n  return {\n    formattedValue: formatValue(),\n    convertChangeHandlerParam,\n    displayFormattedValue: () => setIsFormattedValue(true),\n    displayOriginalValue: () => setIsFormattedValue(false),\n  };\n};\n","import { useRef, useState, useEffect } from 'react';\n\nexport const useInputMessageDynamicHeight = (validationMessage?: string) => {\n  const messageRef = useRef<HTMLDivElement>(null);\n  const [messageWrapHeight, setMessageWrapHeight] =\n    useState<React.CSSProperties>();\n\n  useEffect(() => {\n    const { current } = messageRef;\n    if (current && validationMessage) {\n      return setMessageWrapHeight({\n        height: current.clientHeight,\n      });\n    }\n    return setMessageWrapHeight(undefined);\n  }, [validationMessage]);\n\n  return { messageRef, messageWrapHeight };\n};\n","import { useState, useEffect } from 'react';\n\nimport { INITIAL } from '@constants';\n\nimport type { OpenStatus } from './useSelectOpenStatus';\n\nexport type ValidOptionValue = string | number;\n\ninterface UseOpenStatusParams {\n  openStatus: OpenStatus;\n  options?: {\n    label: string;\n    value: ValidOptionValue;\n  }[];\n  selectRefs: React.MutableRefObject<(HTMLButtonElement | null)[]>;\n  onKeyDown?: (event: KeyboardEvent) => void;\n}\n\nexport const useIndexForSelect = ({\n  openStatus,\n  options,\n  selectRefs,\n  onKeyDown,\n}: UseOpenStatusParams) => {\n  const indexForSelectState = useState(INITIAL.INDEX);\n  const [, setIndexForSelect] = indexForSelectState;\n\n  useEffect(() => {\n    if (openStatus === true && options) {\n      const keyboardEvent = (event: KeyboardEvent) => {\n        onKeyDown?.(event);\n        switch (event.key) {\n          case 'ArrowUp':\n            event.preventDefault();\n            return setIndexForSelect((prevIndex) => {\n              if (prevIndex > 0) {\n                const nextIndex = prevIndex - 1;\n                selectRefs.current[nextIndex]?.focus();\n                return nextIndex;\n              }\n              return prevIndex;\n            });\n\n          case 'ArrowDown':\n            event.preventDefault();\n            return setIndexForSelect((prevIndex) => {\n              if (prevIndex < options.length - 1) {\n                const nextIndex = prevIndex + 1;\n                selectRefs.current[nextIndex]?.focus();\n                return nextIndex;\n              }\n              return prevIndex;\n            });\n          case 'Enter':\n            event.preventDefault();\n            return setIndexForSelect((index) => {\n              if (index >= 0) selectRefs.current[index]?.click();\n              return index;\n            });\n          default:\n        }\n      };\n\n      document.addEventListener('keydown', keyboardEvent);\n      return () => document.removeEventListener('keydown', keyboardEvent);\n    }\n  }, [onKeyDown, openStatus, options, selectRefs, setIndexForSelect]);\n\n  return indexForSelectState;\n};\n","import { useEffect, useState } from 'react';\n\nexport type OpenStatus = boolean | 'closing' | 'opening';\n\nexport const useSelectOpenStatus = (opened: boolean) => {\n  const [openStatus, setOpenStatus] = useState<OpenStatus>(opened);\n\n  useEffect(() => {\n    setOpenStatus((prevOpenState) => {\n      if (prevOpenState !== opened) return opened ? 'opening' : 'closing';\n      return prevOpenState;\n    });\n  }, [opened, setOpenStatus]);\n\n  useEffect(() => {\n    if (typeof openStatus === 'string') {\n      const nextOpenState = openStatus === 'opening';\n\n      const timeout = setTimeout(() => setOpenStatus(nextOpenState), 200);\n      return () => clearTimeout(timeout);\n    }\n  }, [openStatus]);\n\n  return openStatus;\n};\n","import { createContext, useContext } from 'react';\n\nexport type ToastType =\n  | 'fail'\n  | 'success'\n  | 'warning'\n  | 'info'\n  | React.ReactNode;\n\nexport interface ToastOption {\n  type?: ToastType;\n  message: string;\n  holdTime?: number;\n}\n\ntype ToastContextValue = React.Dispatch<React.SetStateAction<ToastOption[]>>;\n\nexport const ToastContext = createContext<ToastContextValue | undefined>(\n  undefined,\n);\n\nexport const useToastContext = () => {\n  const context = useContext(ToastContext);\n\n  if (context === undefined) {\n    throw new Error(\n      'useToastContext must be used within a ToastContextProvider',\n    );\n  }\n\n  return {\n    setToastOptionList: context,\n  };\n};\n","import { useCallback, ComponentType } from 'react';\n\nimport {\n  ValidationContextProvider,\n  useValidationContext,\n} from '@contexts/ValidationContext';\n\ninterface ValidateResult {\n  isValid: boolean;\n  invalidElementIds: string[];\n}\n\ninterface ValidateOptions {\n  scrollToFirstInvalid?: boolean;\n}\n\nexport const useValidate = () => {\n  const { validationMap } = useValidationContext();\n\n  const validate = useCallback(\n    ({ scrollToFirstInvalid }: ValidateOptions) => {\n      const validateResult: ValidateResult = {\n        isValid: true,\n        invalidElementIds: [],\n      };\n\n      if (!validationMap) throw new Error('validationMap is not defined');\n\n      validationMap.forEach((validateValue, id) => {\n        if (validateValue()) {\n          validateResult.isValid = false;\n          validateResult.invalidElementIds.push(id);\n        }\n      });\n\n      if (scrollToFirstInvalid && !validateResult.isValid) {\n        const [firstInvalidElementId] = validateResult.invalidElementIds;\n\n        const firstInvalidElement = document.getElementById(\n          firstInvalidElementId,\n        );\n\n        firstInvalidElement?.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center',\n        });\n      }\n\n      return validateResult;\n    },\n    [validationMap],\n  );\n\n  return {\n    validate,\n  };\n};\n\nexport const validationObserver =\n  <T extends object>(Component: ComponentType<T>) =>\n  // eslint-disable-next-line react/function-component-definition\n  (props: T) =>\n    (\n      <ValidationContextProvider>\n        <Component {...props} />\n      </ValidationContextProvider>\n    );\n","export const useDarkMode = () => {\n  const isDevicePrefersDarkMode = window.matchMedia(\n    '(prefers-color-scheme: dark)',\n  ).matches;\n  const hasDarkModeClass =\n    document.documentElement.classList.contains('pastime:dark');\n  const hasLightModeClass =\n    document.documentElement.classList.contains('pastime:light');\n\n  return {\n    isDarkMode:\n      !hasLightModeClass && (hasDarkModeClass || isDevicePrefersDarkMode),\n\n    setDarkMode: (isDarkMode: boolean) => {\n      if (isDarkMode) {\n        document.documentElement.classList.add('pastime:dark');\n        document.documentElement.classList.remove('pastime:light');\n      } else {\n        document.documentElement.classList.add('pastime:light');\n        document.documentElement.classList.remove('pastime:dark');\n      }\n    },\n  };\n};\n","export function cleanClassName(className: string | undefined | null | false) {\n  if (className) {\n    return className\n      .replace(/(undefined)|(false)|\\n/g, '')\n      .replace(/ +(?= )/g, '')\n      .replace(/^ */g, '')\n      .replace(/ *$/g, '');\n  }\n}\n","import { createContext } from 'react';\n\ntype ValidationStoreData = Map<string, () => string | undefined>;\n\nexport const ValidationContext = createContext<ValidationStoreData | null>(\n  null,\n);\n\nexport const createValidationStore = () => {\n  const data: ValidationStoreData = new Map();\n  return Object.assign(data, {\n    provideValidationStore: (children: React.ReactNode) => (\n      <ValidationContext.Provider value={data}>\n        {children}\n      </ValidationContext.Provider>\n    ),\n    validateAll: () => {\n      const result = {\n        isValid: true,\n        invalidKeys: [] as string[],\n      };\n      data.forEach((validation, key) => {\n        if (validation()) {\n          result.isValid = false;\n          result.invalidKeys.push(key);\n        }\n      });\n      return result;\n    },\n  });\n};\n\nexport type ValidationStore = ReturnType<typeof createValidationStore>;\n"],"names":["INDEX","useMountedEffect","effect","deps","isMounted","useRef","createEffect","useToastDynamicHeight","hasSpace","ref","height","setHeight","useState","TOAST_STATE","TOAST_STATE2","CLOSING_ANIMATION_DURATION","useToastState","holdTime","space","toastState","setToastState","useEffect","holdTimer","closeTimer","isToastHoldable","ValidationContext","createContext","ValidationContextProvider","children","current","jsx","useValidationContext","useContext","useValidationMessage","id","value","validateHandler","validationMap","validationMessage","setValidationMessage","validateValue","useCallback","value2","validationMessage2","useButtonDelay","delay","disabled","delayState","setDelayState","startTimer","endTimer","isDelaying","useFormatInputValue","type","placeholder","isFormattedValue","setIsFormattedValue","formatValue","valueString","convertChangeHandlerParam","isValidNumber","numberString","useInputMessageDynamicHeight","messageRef","messageWrapHeight","setMessageWrapHeight","useIndexForSelect","openStatus","options","selectRefs","onKeyDown","indexForSelectState","INITIAL.INDEX","setIndexForSelect","keyboardEvent","event","prevIndex","nextIndex","_a","index","useSelectOpenStatus","opened","setOpenStatus","prevOpenState","nextOpenState","timeout","ToastContext","useToastContext","context","validationObserver","Component","props","useDarkMode","isDevicePrefersDarkMode","hasDarkModeClass","isDarkMode","cleanClassName","className"],"mappings":"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"}