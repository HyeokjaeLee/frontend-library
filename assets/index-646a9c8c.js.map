{"version":3,"file":"index-646a9c8c.js","sources":["../../../src/components/atoms/Button/index.tsx"],"sourcesContent":["import type { ReactNode } from 'react';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport styles from './index.module.scss';\nimport { cleanClassName } from '../../../utils';\n\ntype HtmlButtonProps = React.DetailedHTMLProps<\n  React.ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n>;\n\nexport interface ButtonProps extends HtmlButtonProps {\n  delay?: number;\n  size?: 'small' | 'medium' | 'large';\n  theme?:\n    | 'primary'\n    | 'secondary'\n    | 'success'\n    | 'warning'\n    | 'danger'\n    | 'text-dark'\n    | 'text-light';\n  icon?: ReactNode;\n  iconDirection?: 'left' | 'right';\n  shape?: 'round' | 'default';\n}\n\nexport const Button = ({\n  delay,\n  type = 'button',\n  children,\n  size = 'medium',\n  theme = 'primary',\n  disabled,\n  shape = 'default',\n  iconDirection = 'left',\n  icon,\n  className,\n  ...restButtonProps\n}: ButtonProps) => {\n  const [delayState, setDelayState] = useState<'before' | 'delaying' | 'after'>(\n    'after',\n  );\n\n  const childrenType = useMemo(() => {\n    if (icon && children) return 'both';\n\n    return icon ? 'icon' : 'text';\n  }, [icon, children]);\n\n  useEffect(() => {\n    if (!disabled && delay) {\n      setDelayState('before');\n      setTimeout(() => setDelayState('delaying'));\n      setTimeout(() => setDelayState('after'), delay);\n    }\n  }, [delay, disabled]);\n\n  const isDelaying = delayState === 'delaying';\n  const isDelayButton = delayState === 'before' || isDelaying;\n  const isDisabled = disabled || isDelayButton;\n\n  return (\n    <button\n      {...restButtonProps}\n      type={type}\n      className={cleanClassName(\n        `${isDelayButton ? styles['delayed-button'] : styles.button} ${\n          styles[`shape-${shape}`]\n        } ${styles[`size-${size}`]} ${\n          styles[`icon-direction-${iconDirection}`]\n        } ${styles[`children-type-${childrenType}`]} ${\n          styles[theme]\n        } ${className}`,\n      )}\n      disabled={isDisabled}\n    >\n      {delay && isDelayButton ? (\n        <div\n          className={`${styles['delay-bar']} ${isDelaying && styles.delaying}`}\n          style={{ transition: `transform ${delay / 1000}s linear` }}\n        />\n      ) : null}\n      {children && <div className={styles['button-content']}>{children}</div>}\n      {icon ? (\n        <div className={`${styles['button-content']} ${styles.icon}`}>\n          {icon}\n        </div>\n      ) : null}\n    </button>\n  );\n};\n"],"names":["Button","delay","type","children","size","theme","disabled","shape","iconDirection","icon","className","restButtonProps","delayState","setDelayState","useState","childrenType","useMemo","useEffect","isDelaying","isDelayButton","isDisabled","jsxs","cleanClassName","styles","jsx"],"mappings":"+mDA2BOA,EAAA,CAAA,CAAgB,MAAAC,EACrB,KAAAC,EAAA,SACO,SAAAC,EACP,KAAAC,EAAA,SACO,MAAAC,EAAA,UACC,SAAAC,EACR,MAAAC,EAAA,UACQ,cAAAC,EAAA,OACQ,KAAAC,EAChB,UAAAC,EACA,GAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAoC,OAClC,EAGFC,EAAAC,EAAAA,QAAA,IACEP,GAAAN,EAAsB,OAEtBM,EAAA,OAAA,OAAuB,CAAAA,EAAAN,CAAA,CAAA,EAGzBc,EAAAA,UAAA,IAAA,CACE,CAAAX,GAAAL,IACEY,EAAA,QAAA,EACA,WAAA,IAAAA,EAAA,UAAA,CAAA,EACA,WAAA,IAAAA,EAAA,OAAA,EAAAZ,CAAA,EACF,EAAA,CAAAA,EAAAK,CAAA,CAAA,EAGF,MAAAY,EAAAN,IAAA,WACAO,EAAAP,IAAA,UAAAM,EACAE,EAAAd,GAAAa,EAEA,OAAAE,EAAA,KACE,SAAC,CAAA,GAAAV,EACK,KAAAT,EACJ,UAAAoB,EACW,GAAAH,EAAAI,EAAA,gBAAA,EAAAA,EAAA,UAAAA,EAAA,SAAAhB,GAAA,KAAAgB,EAAA,QAAAnB,GAAA,KAAAmB,EAAA,kBAAAf,GAAA,KAAAe,EAAA,iBAAAR,GAAA,KAAAQ,EAAAlB,CAAA,KAAAK,GAOL,EACN,SAAAU,EACU,SAAA,CAETnB,GAAAkB,EAAAK,EAAA,IACC,MAAC,CAAA,UAAA,GAAAD,EAAA,WAAA,KAAAL,GAAAK,EAAA,WAC2D,MAAA,CAAA,WAAA,aAAAtB,EAAA,aAAA,CACD,CAAA,EAAA,KAEzDE,GAAAqB,EAAAA,IAAA,MAAA,CAAA,UAAAD,EAAA,gBAAA,EAAA,SAAApB,EAAA,EAC6DM,EAAAe,EAAA,IAAA,MAAA,CAAA,UAAA,GAAAD,EAAA,gBAAA,KAAAA,EAAA,OAAA,SAAAd,CAAA,CAAA,EAAA,IAK7D,CAAA,CAAA,CAGV"}