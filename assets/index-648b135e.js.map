{"version":3,"file":"index-648b135e.js","sources":["../../../node_modules/.pnpm/react-feather@2.0.10_react@18.2.0/node_modules/react-feather/dist/icons/check.js","../../../src/components/atoms/Input/index.tsx","../../../src/components/atoms/Options/index.tsx"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Check = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"20 6 9 17 4 12\"\n  }));\n});\nCheck.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nCheck.displayName = 'Check';\nexport default Check;","import {\n  Ref,\n  useRef,\n  useState,\n  useMemo,\n  forwardRef,\n  createContext,\n  useContext,\n  useEffect,\n} from 'react';\n\nimport styles from './index.module.scss';\nimport { cleanClassName } from '../../../utils';\n\ntype HTMLInputProps = React.DetailedHTMLProps<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n>;\n\ntype HTMLDivProps = React.DetailedHTMLProps<\n  React.HTMLAttributes<HTMLDivElement>,\n  HTMLDivElement\n>;\n\nexport interface InputContainerProps extends HTMLDivProps {\n  validationMessage?: string | null;\n}\n\nconst InputContext = createContext<\n  Pick<InputContainerProps, 'validationMessage'> & {\n    readonly?: boolean;\n    setReadonly?: React.Dispatch<React.SetStateAction<boolean>>;\n  }\n>({});\n\nconst InputContainer = ({\n  children,\n  className,\n  validationMessage,\n  ...restDivProps\n}: InputContainerProps) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const [messageWrapHeight, setMessageWrapHeight] =\n    useState<React.CSSProperties>();\n\n  const [readonly, setReadonly] = useState(false);\n\n  useEffect(\n    () =>\n      setMessageWrapHeight({\n        height: ref.current?.clientHeight ?? 0,\n      }),\n    [ref, validationMessage],\n  );\n\n  const inputContextValue = useMemo(\n    () => ({\n      validationMessage,\n      readonly,\n      setReadonly,\n    }),\n    [validationMessage, readonly, setReadonly],\n  );\n\n  return (\n    <div\n      {...restDivProps}\n      className={cleanClassName(\n        `${styles['input-container-wrap']} ${className}`,\n      )}\n    >\n      <InputContext.Provider value={inputContextValue}>\n        <div className={styles['input-container']}>{children}</div>\n      </InputContext.Provider>\n      <div\n        className={styles['validation-message-wrap']}\n        style={messageWrapHeight}\n      >\n        {validationMessage ? (\n          <p ref={ref} className={styles['validation-message']}>\n            {validationMessage}\n          </p>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport interface InputWrapProps extends HTMLDivProps {\n  size?: 'small' | 'medium' | 'large';\n  theme?: 'light' | 'dark';\n}\n\nconst InputWrap = ({\n  size = 'medium',\n  className,\n  theme = 'light',\n  ...restDivProps\n}: InputWrapProps) => {\n  const { validationMessage, readonly } = useContext(InputContext);\n\n  return (\n    <div\n      {...restDivProps}\n      className={cleanClassName(\n        `${styles['input-wrap']} ${styles[theme]} ${\n          readonly && styles.readonly\n        } ${validationMessage && styles.error} ${\n          styles[`size-${size}`]\n        } ${className}`,\n      )}\n    />\n  );\n};\n\nexport type InputType =\n  | 'text'\n  | 'number'\n  | 'large-number'\n  | 'phone-number'\n  | 'password'\n  | 'button';\n\nexport interface InputProps\n  extends Omit<HTMLInputProps, 'type' | 'value' | 'disabled' | 'onChange'> {\n  type?: InputType;\n  value?: number | string;\n  disabled?: boolean | 'readonly';\n  onChange?: (value: string) => void;\n  ref?: Ref<HTMLInputElement>;\n}\n\nconst InputMain: (props: InputProps) => JSX.Element | null = forwardRef(\n  (\n    {\n      type = 'text',\n      placeholder = '',\n      disabled = false,\n      value: parentValue,\n      onChange,\n      className,\n      onFocus,\n      ref: _, // eslint-disable-line @typescript-eslint/no-unused-vars\n      ...restInputProps\n    },\n    ref,\n  ) => {\n    const [isFocused, setIsFucused] = useState(false);\n\n    const { setReadonly } = useContext(InputContext);\n\n    const isReadonly = disabled === 'readonly';\n\n    useEffect(() => setReadonly?.(isReadonly), [setReadonly, isReadonly]);\n\n    const value = (() => {\n      if (type === 'button' && !parentValue) return placeholder;\n\n      if (parentValue !== 0 && !parentValue) return '';\n\n      const valueString = String(parentValue);\n\n      if (isFocused) return valueString;\n\n      switch (type) {\n        case 'number':\n          return valueString;\n\n        case 'large-number':\n          return Number(valueString).toLocaleString();\n\n        case 'phone-number':\n          if (valueString.length === 10)\n            return valueString.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3');\n          return valueString.replace(/(\\d{3})(\\d{4})(\\d{4})/, '$1-$2-$3');\n\n        default:\n          return valueString;\n      }\n    })();\n\n    const convertChangeHandlerParam = useMemo((): ((\n      value: string,\n    ) => string | null) => {\n      switch (type) {\n        case 'number':\n        case 'large-number':\n          return (value) => {\n            const isValidNumber = value === '-' || !Number.isNaN(Number(value));\n            return value && (isValidNumber ? value : null);\n          };\n\n        case 'phone-number':\n          return (value) => {\n            let numberString = value.replace(/[^0-9]/g, '');\n            if (numberString.length > 11)\n              numberString = numberString.slice(0, 11);\n\n            return value && numberString;\n          };\n\n        default:\n          return (value) => value;\n      }\n    }, [type]);\n\n    return (\n      <input\n        {...restInputProps}\n        ref={ref}\n        onFocus={(e) => {\n          setIsFucused(true);\n          onFocus?.(e);\n        }}\n        onBlur={() => setIsFucused(false)}\n        type={type}\n        placeholder={placeholder}\n        value={value}\n        className={cleanClassName(\n          `${styles.input} ${type === 'button' && styles.button} ${\n            parentValue || styles.empty\n          } ${className}`,\n        )}\n        disabled={!!disabled}\n        onChange={({ target: { value } }) => {\n          const convertedValue = convertChangeHandlerParam(value);\n\n          if (convertedValue !== null) onChange?.(convertedValue);\n        }}\n      />\n    );\n  },\n);\n\nexport const Input = Object.assign(InputMain, {\n  Container: InputContainer,\n  Wrap: InputWrap,\n});\n","import { useState, useEffect, useRef } from 'react';\nimport { Check } from 'react-feather';\n\nimport styles from './index.module.scss';\nimport { cleanClassName } from '../../../utils';\n\nexport type ValidOptionValue = string | number;\n\ntype HtmlSectionProps = React.DetailedHTMLProps<\n  React.HTMLAttributes<HTMLSelectElement>,\n  HTMLSelectElement\n>;\n\nexport interface OptionsProps<\n  OptionValue = ValidOptionValue,\n  Multiple = boolean,\n> extends Omit<HtmlSectionProps, 'value' | 'onChange' | 'onKeyDown'> {\n  opened?: boolean;\n  options?: {\n    label: string;\n    value: OptionValue;\n  }[];\n  multiple: Multiple;\n  value?: Multiple extends true ? OptionValue[] : OptionValue;\n  onChange?: (value: OptionsProps['value']) => void;\n  onKeyDown?: (event: KeyboardEvent) => void;\n  float?: 'top' | 'bottom';\n  theme?: 'light' | 'dark';\n}\n\nexport const Options = <OptionValue, Multiple>({\n  opened = false,\n  options,\n  multiple = false as Multiple,\n  value: selectedValue,\n  onChange,\n  onKeyDown,\n  float = 'bottom',\n  className,\n  theme = 'light',\n  ...restSectionProps\n}: OptionsProps<OptionValue, Multiple>) => {\n  const [openState, setOpenState] = useState<boolean | 'closing' | 'opening'>(\n    opened,\n  );\n\n  useEffect(() => {\n    setOpenState((prevOpenState) => {\n      if (prevOpenState !== opened) return opened ? 'opening' : 'closing';\n      return prevOpenState;\n    });\n  }, [opened]);\n\n  const isChangeOpenState = typeof openState === 'string';\n  const [indexForSelect, setIndexForSelect] = useState(-1);\n\n  useEffect(() => {\n    if (isChangeOpenState) {\n      const nextOpenState = openState === 'opening';\n\n      setIndexForSelect(\n        options?.findIndex(({ value }) => value === selectedValue) ?? -1,\n      );\n\n      const timeout = setTimeout(() => setOpenState(nextOpenState), 250);\n      return () => clearTimeout(timeout);\n    }\n  }, [isChangeOpenState, openState, options, selectedValue]);\n\n  const optionRefs = useRef<(HTMLButtonElement | null)[]>([]);\n\n  useEffect(() => {\n    if (openState === true && options) {\n      const keyboardEvent = (event: KeyboardEvent) => {\n        onKeyDown?.(event);\n        switch (event.key) {\n          case 'ArrowUp':\n            event.preventDefault();\n            return setIndexForSelect((prevIndex) => {\n              if (prevIndex > 0) {\n                const nextIndex = prevIndex - 1;\n                optionRefs.current[nextIndex]?.focus();\n                return nextIndex;\n              }\n              return prevIndex;\n            });\n\n          case 'ArrowDown':\n            event.preventDefault();\n            return setIndexForSelect((prevIndex) => {\n              if (prevIndex < options.length - 1) {\n                const nextIndex = prevIndex + 1;\n                optionRefs.current[nextIndex]?.focus();\n                return nextIndex;\n              }\n              return prevIndex;\n            });\n          case 'Enter':\n            event.preventDefault();\n            return setIndexForSelect((index) => {\n              if (index >= 0) optionRefs.current[index]?.click();\n              return index;\n            });\n          default:\n        }\n      };\n\n      document.addEventListener('keydown', keyboardEvent);\n      return () => document.removeEventListener('keydown', keyboardEvent);\n    }\n  }, [openState, options, onKeyDown]);\n\n  return openState && options?.length ? (\n    <section\n      {...restSectionProps}\n      className={cleanClassName(\n        `${styles.options} ${styles[theme]} ${styles[float]} ${\n          isChangeOpenState && styles[openState]\n        } ${className}`,\n      )}\n    >\n      <ul className={cleanClassName(styles['option-container'])}>\n        {options?.map(({ label, value }, index) => {\n          const isHovered = index === indexForSelect;\n          const isSelected = (() => {\n            if (selectedValue === undefined) return false;\n\n            if (multiple && selectedValue instanceof Array)\n              return selectedValue.includes(value);\n\n            return selectedValue === value;\n          })();\n\n          return (\n            <li key={index} className={styles['option-wrap']}>\n              <button\n                type=\"button\"\n                ref={(element) => {\n                  optionRefs.current[index] = element;\n                }}\n                className={cleanClassName(\n                  `${styles['option-item']} ${isHovered && styles.hovered}`,\n                )}\n                onClick={() => {\n                  if (multiple) {\n                    const selectedValues = (selectedValue ??\n                      []) as OptionValue[];\n                    const handleChange = onChange as\n                      | ((values: OptionValue[]) => void)\n                      | undefined;\n                    handleChange?.(\n                      isSelected\n                        ? selectedValues.filter(\n                            (selectedValue) => selectedValue !== value,\n                          )\n                        : [...selectedValues, value],\n                    );\n                  } else {\n                    const handleChange = onChange as\n                      | ((value?: OptionValue) => void)\n                      | undefined;\n                    handleChange?.(isSelected ? undefined : value);\n                  }\n                }}\n                onMouseEnter={() => {\n                  setIndexForSelect(index);\n                }}\n              >\n                <div>{label}</div>\n                <div\n                  className={cleanClassName(\n                    `${styles['icon-wrap']} ${isSelected && styles.show}`,\n                  )}\n                >\n                  {<Check size=\"1em\" />}\n                </div>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  ) : (\n    <></>\n  );\n};\n"],"names":["_extends","target","i","source","key","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","sourceKeys","Check","forwardRef","_ref","ref","_ref$color","color","_ref$size","size","rest","React","PropTypes","Check$1","InputContext","createContext","InputContainer","children","className","validationMessage","restDivProps","useRef","messageWrapHeight","setMessageWrapHeight","useState","readonly","setReadonly","useEffect","_a","inputContextValue","useMemo","jsxs","cleanClassName","styles","jsx","InputWrap","theme","useContext","InputMain","type","placeholder","disabled","parentValue","onChange","onFocus","_","restInputProps","isFocused","setIsFucused","isReadonly","value","valueString","convertChangeHandlerParam","value2","isValidNumber","numberString","e","convertedValue","Input","Options","opened","options","multiple","selectedValue","onKeyDown","float","restSectionProps","openState","setOpenState","prevOpenState","isChangeOpenState","indexForSelect","setIndexForSelect","nextOpenState","timeout","optionRefs","keyboardEvent","event","prevIndex","nextIndex","index","label","isHovered","isSelected","element","selectedValues","handleChange","selectedValue2","Fragment"],"mappings":"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","x_google_ignoreList":[0]}