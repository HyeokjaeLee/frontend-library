{"version":3,"file":"index.stories-57af1396.js","sources":["../../../src/contexts/TabContext.tsx","../../../src/hooks/private/useTabOverflowX.tsx","../../../src/components/organisms/Tab/TabItem.tsx","../../../src/components/organisms/Tab/index.tsx"],"sourcesContent":["import { createContext, useContext, useMemo } from 'react';\n\nimport type { ButtonProps } from '@components/molecules';\n\ntype TabContextValue = Pick<ButtonProps, 'size' | 'fixedDarkMode'>;\n\nconst TabContext = createContext<TabContextValue | undefined>(undefined);\n\ninterface TabContextProviderProps extends TabContextValue {\n  children: React.ReactNode;\n}\n\nexport const TabContextProvider = ({\n  size,\n  fixedDarkMode,\n  children,\n}: TabContextProviderProps) => {\n  const value = useMemo(\n    () => ({\n      size,\n      fixedDarkMode,\n    }),\n    [size, fixedDarkMode],\n  );\n\n  return <TabContext.Provider value={value}>{children}</TabContext.Provider>;\n};\n\nexport const useTabContext = () => {\n  const context = useContext(TabContext);\n\n  if (context === undefined)\n    throw new Error('useTabContext must be used within a TabContextProvider');\n\n  return context;\n};\n","import { useEffect, useRef, useState } from 'react';\n\nexport const useTabOverflowX = () => {\n  const [isOverflowX, setIsOverflowX] = useState(false);\n  const ref = useRef<HTMLUListElement>(null);\n\n  useEffect(() => {\n    const uListElement = ref.current;\n    if (uListElement)\n      setIsOverflowX(uListElement.scrollWidth > uListElement.clientWidth);\n  }, []);\n\n  return { isOverflowX, ref };\n};\n","import { Button } from '@components/molecules';\nimport type { ButtonProps } from '@components/molecules';\nimport { useTabContext } from '@contexts/TabContext';\nimport { HTMLTagProps } from '@types';\nimport { cleanClassName } from '@utils';\n\nimport styles from './TabItem.module.scss';\n\nexport interface TabItemProps\n  extends Omit<HTMLTagProps<'li'>, 'children' | 'onClick'>,\n    Pick<\n      ButtonProps,\n      'disabled' | 'children' | 'onClick' | 'icon' | 'iconDirection'\n    > {\n  active?: boolean;\n}\n\nexport const TabItem = ({\n  //* TabItem props\n  active = false,\n\n  //* Button props\n  children,\n  disabled,\n  onClick,\n  icon,\n  iconDirection,\n\n  //* HTML li props\n  className,\n  ...restLiProps\n}: TabItemProps) => {\n  const buttonProps = useTabContext();\n  return (\n    <li\n      {...restLiProps}\n      className={cleanClassName(\n        `${styles['tab-item']} ${\n          active && styles['tab-item-active']\n        } ${className}`,\n      )}\n    >\n      <Button\n        {...buttonProps}\n        disabled={disabled}\n        onClick={onClick}\n        theme=\"clear\"\n        className={styles['item-content']}\n        icon={icon}\n        iconDirection={iconDirection}\n      >\n        {children}\n      </Button>\n    </li>\n  );\n};\n","import type { ButtonProps } from '@components/molecules';\nimport { TabContextProvider } from '@contexts/TabContext';\nimport { useDarkMode, useTabOverflowX } from '@hooks';\nimport { HTMLTagProps } from '@types';\nimport { cleanClassName } from '@utils';\n\nimport { TabItem } from './TabItem';\nimport styles from './index.module.scss';\n\nexport type { TabItemProps } from './TabItem';\n\nexport type TabProps = Omit<HTMLTagProps<'ul'>, 'size' | 'ref'> &\n  Pick<ButtonProps, 'size' | 'fixedDarkMode'>;\n\nexport const Tab = Object.assign(\n  ({\n    //* Button props\n    size,\n    fixedDarkMode,\n\n    //* HTML ul props\n    className,\n    children,\n    ...restUlProps\n  }: TabProps) => {\n    const { isOverflowX, ref } = useTabOverflowX();\n\n    const { isDarkMode } = useDarkMode(fixedDarkMode);\n\n    return (\n      <ul\n        {...restUlProps}\n        ref={ref}\n        className={cleanClassName(\n          `${styles.tab} ${\n            isOverflowX && styles[`overflow-${isDarkMode ? 'dark' : 'light'}`]\n          } ${className}`,\n        )}\n      >\n        <TabContextProvider size={size} fixedDarkMode={fixedDarkMode}>\n          {children}\n        </TabContextProvider>\n      </ul>\n    );\n  },\n  {\n    Item: TabItem,\n  },\n);\n"],"names":["TabContext","createContext","TabContextProvider","size","fixedDarkMode","children","value","useMemo","jsx","useTabContext","context","useContext","useTabOverflowX","isOverflowX","setIsOverflowX","useState","ref","useRef","useEffect","uListElement","TabItem","active","disabled","onClick","icon","iconDirection","className","restLiProps","buttonProps","cleanClassName","styles","Button","Tab","restUlProps","isDarkMode","useDarkMode"],"mappings":"ggBAMA,MAAAA,EAAAC,EAAAA,cAAA,MAAA,EAMOC,EAAA,CAAA,CAA4B,KAAAC,EACjC,cAAAC,EACA,SAAAC,CAEF,IAAA,CACE,MAAAC,EAAAC,EAAA,QAAc,KAAA,CACL,KAAAJ,EACL,cAAAC,CACA,GACF,CAAAD,EAAAC,CAAA,CACoB,EAGtB,OAAAI,EAAAA,IAAAR,EAAA,SAAA,CAAA,MAAAM,EAAA,SAAAD,CAAA,CAAA,CACF,EAEOI,EAAA,IAAA,CACL,MAAAC,EAAAC,aAAAX,CAAA,EAEA,GAAAU,IAAA,OACE,MAAA,IAAA,MAAA,wDAAA,EAEF,OAAAA,CACF,2ZCjCO,MAAME,EAAkB,IAAM,CACnC,KAAM,CAACC,EAAaC,CAAc,EAAIC,WAAS,EAAK,EAC9CC,EAAMC,SAAyB,IAAI,EAEzCC,OAAAA,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAeH,EAAI,QACrBG,GACaL,EAAAK,EAAa,YAAcA,EAAa,WAAW,CACtE,EAAG,CAAE,CAAA,EAEE,CAAE,YAAAN,EAAa,IAAAG,EACxB,+hCCIOI,EAAA,CAAA,CAAiB,OAAAC,EAAA,GAEb,SAAAhB,EAGT,SAAAiB,EACA,QAAAC,EACA,KAAAC,EACA,cAAAC,EACA,UAAAC,EAGA,GAAAC,CAEF,IAAA,CACE,MAAAC,EAAAnB,IACA,OAAAD,EAAA,IACE,KAAC,CAAA,GAAAmB,EACK,UAAAE,EACO,GAAAC,EAAA,UAAA,CAAA,IAAAT,GAAAS,EAAA,iBAAA,CAAA,IAAAJ,CAAA,EAGI,EACf,SAAAlB,EAAA,IAEAuB,EAAC,CAAA,GAAAH,EACK,SAAAN,EACJ,QAAAC,EACA,MAAA,QACM,UAAAO,EAAA,cAAA,EAC0B,KAAAN,EAChC,cAAAC,EACA,SAAApB,CAEC,CAAA,CACH,CAAA,CAGN,28CCzCO2B,EAAA,OAAA,OAAmB,CAAA,CACvB,KAAA7B,EAEC,cAAAC,EACA,UAAAsB,EAGA,SAAArB,EACA,GAAA4B,CACG,IAAA,CAEH,KAAA,CAAA,YAAApB,EAAA,IAAAG,CAAA,EAAAJ,EAAA,EAEA,CAAA,WAAAsB,CAAA,EAAAC,EAAA/B,CAAA,EAEA,OAAAI,EAAA,IACE,KAAC,CAAA,GAAAyB,EACK,IAAAjB,EACJ,UAAAa,EACW,GAAAC,EAAA,GAAA,IAAAjB,GAAAiB,EAAA,YAAAI,EAAA,OAAA,OAAA,EAAA,CAAA,IAAAR,CAAA,EAGI,EACf,SAAAlB,EAAA,IAAAN,EAAA,CAAA,KAAAC,EAAA,cAAAC,EAAA,SAAAC,EAAA,CAIA,CAAA,CACF,EAEJ,CACA,KAAAe,CACQ,CAEV;;;;;;;;;;"}