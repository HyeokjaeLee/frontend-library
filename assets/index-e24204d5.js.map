{"version":3,"file":"index-e24204d5.js","sources":["../../../src/components/atoms/Input/inputWrap.tsx","../../../src/components/atoms/Input/index.tsx"],"sourcesContent":["import { useDarkMode, useInputMessageDynamicHeight } from '@hooks';\nimport type { HTMLTagProps, Size } from '@types';\nimport { cleanClassName } from '@utils';\n\nimport styles from './InputWrap.module.scss';\n\nexport type InputWrapProps = Omit<HTMLTagProps<'div'>, 'size'> & {\n  size?: Size | 'fit-content';\n  validationMessage?: string;\n  readonly?: boolean;\n  reversed?: boolean;\n};\n\nexport const InputWrap = ({\n  //* Input.Wrap props\n  size = 'medium',\n  validationMessage,\n  readonly = false,\n  reversed = false,\n\n  //* HTML div props\n  children,\n  className,\n  ...restDivProps\n}: InputWrapProps) => {\n  const { messageRef, messageWrapHeight } =\n    useInputMessageDynamicHeight(validationMessage);\n\n  const { isDarkMode } = useDarkMode();\n\n  return (\n    <div\n      {...restDivProps}\n      className={cleanClassName(`${styles['default-width']} ${className}`)}\n    >\n      <div\n        className={cleanClassName(\n          `${styles['input-wrap']} ${isDarkMode && styles.dark} ${\n            validationMessage && styles.error\n          } ${styles[`size-${size}`]} ${readonly && styles.readonly} ${\n            reversed && styles.reversed\n          }`,\n        )}\n      >\n        {children}\n      </div>\n      <div\n        className={cleanClassName(\n          `${styles['validation-message-wrap']} ${\n            messageWrapHeight && styles.show\n          }`,\n        )}\n        style={messageWrapHeight}\n      >\n        {validationMessage ? (\n          <p ref={messageRef} className={styles['validation-message']}>\n            {validationMessage}\n          </p>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n","import { useFormatInputValue } from '@hooks';\nimport type { InputType } from '@hooks';\nimport type { HTMLTagProps } from '@types';\nimport { cleanClassName } from '@utils';\n\nimport styles from './index.module.scss';\nimport { InputWrap } from './inputWrap';\n\nexport type { InputWrapProps } from './inputWrap';\n\nexport interface InputProps\n  extends Omit<\n    HTMLTagProps<'input'>,\n    'type' | 'value' | 'onChange' | 'width' | 'height' | 'size'\n  > {\n  type?: InputType;\n  value?: number | string;\n  onChange?: (value: string) => void;\n}\n\nexport const Input = Object.assign(\n  ({\n    //* Input props\n    type = 'text',\n    value,\n    onChange,\n\n    //* HTML input props\n    placeholder,\n    className,\n    onFocus,\n    onBlur,\n    ...restInputProps\n  }: InputProps) => {\n    const {\n      formattedValue,\n      displayFormattedValue,\n      displayOriginalValue,\n      convertChangeHandlerParam,\n    } = useFormatInputValue({\n      type,\n      value,\n      placeholder,\n    });\n\n    return (\n      <input\n        {...restInputProps}\n        onFocus={(e) => {\n          displayOriginalValue();\n          onFocus?.(e);\n        }}\n        onBlur={(e) => {\n          displayFormattedValue();\n          onBlur?.(e);\n        }}\n        type={type}\n        placeholder={placeholder}\n        value={formattedValue}\n        className={cleanClassName(\n          `${styles.input} ${type === 'button' && styles.button} ${\n            !value && styles.empty\n          } ${className}`,\n        )}\n        onChange={({ target: { value } }) => {\n          const convertedValue = convertChangeHandlerParam(value);\n          if (convertedValue !== null) onChange?.(convertedValue);\n        }}\n      />\n    );\n  },\n  {\n    Wrap: InputWrap,\n  },\n);\n"],"names":["InputWrap","size","validationMessage","readonly","reversed","children","className","restDivProps","messageRef","messageWrapHeight","useInputMessageDynamicHeight","isDarkMode","useDarkMode","jsxs","cleanClassName","styles","jsx","Input","type","value","onChange","placeholder","onFocus","onBlur","restInputProps","formattedValue","displayFormattedValue","displayOriginalValue","convertChangeHandlerParam","useFormatInputValue","e","value2","convertedValue"],"mappings":"mgEAaOA,EAAA,CAAA,CAAmB,KAAAC,EAAA,SAEjB,kBAAAC,EACP,SAAAC,EAAA,GACW,SAAAC,EAAA,GACA,SAAAC,EAGX,UAAAC,EACA,GAAAC,CAEF,IAAA,CACE,KAAA,CAAA,WAAAC,EAAA,kBAAAC,CAAA,EAAAC,EAAAR,CAAA,EAGA,CAAA,WAAAS,GAAAC,IAEA,OAAAC,EAAA,KACE,MAAC,CAAA,GAAAN,EACK,UAAAO,EAAA,GAAAC,EAAA,eAAA,KAAAT,GAAA,EAC+D,SAAA,CAEnEU,EAAA,IAAA,MAAC,CAAA,UAAAF,EACY,GAAAC,EAAA,YAAA,KAAAJ,GAAAI,EAAA,QAAAb,GAAAa,EAAA,SAAAA,EAAA,QAAAd,GAAA,KAAAE,GAAAY,EAAA,YAAAX,GAAAW,EAAA,UAIY,EAEvB,SAAAV,CAEC,CAAA,EACHW,EAAA,IACA,MAAC,CAAA,UAAAF,EACY,GAAAC,EAAA,yBAAA,KAAAN,GAAAM,EAAA,MAEqB,EAEhC,MAAAN,EACO,SAAAP,EAAAc,EAAAA,IAAA,IAAA,CAAA,IAAAR,EAAA,UAAAO,EAAA,oBAAA,EAAA,SAAAb,CAAA,CAAA,EAAA,IAMH,CAAA,CACN,CAAA,CAAA,CAGN,8lBC1CO,MAAAe,EAAA,OAAA,OAAqB,CAAA,CACzB,KAAAC,EAAA,OAEQ,MAAAC,EACP,SAAAC,EACA,YAAAC,EAGA,UAAAf,EACA,QAAAgB,EACA,OAAAC,EACA,GAAAC,CACG,IAAA,CAEH,KAAA,CAAM,eAAAC,EACJ,sBAAAC,EACA,qBAAAC,EACA,0BAAAC,CACA,EAAAC,EAAA,CACsB,KAAAX,EACtB,MAAAC,EACA,YAAAE,CACA,CAAA,EAGF,OAAAL,EAAA,IACE,QAAC,CAAA,GAAAQ,EACK,QAAAM,GAAA,CAEFH,IACAL,GAAA,MAAAA,EAAAQ,EAAW,EACb,OAAAA,GAAA,CAEEJ,IACAH,GAAA,MAAAA,EAAAO,EAAU,EACZ,KAAAZ,EACA,YAAAG,EACA,MAAAI,EACO,UAAAX,EACI,GAAAC,EAAA,SAAAG,IAAA,UAAAH,EAAA,UAAA,CAAAI,GAAAJ,EAAA,SAAAT,GAGL,EACN,SAAA,CAAA,CAAA,OAAA,CAAA,MAAAyB,CAAA,CAAA,IAAA,CAEE,MAAAC,EAAAJ,EAAAG,CAAA,EACAC,IAAA,OAA6BZ,GAAA,MAAAA,EAAAY,GAAyB,CACxD,CAAA,CACF,EAEJ,CACA,KAAAhC,CACQ,CAEV"}