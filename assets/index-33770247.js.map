{"version":3,"file":"index-33770247.js","sources":["../../../node_modules/.pnpm/react-feather@2.0.10_react@18.2.0/node_modules/react-feather/dist/icons/check.js","../../../src/components/atoms/InputContainer/index.tsx","../../../src/components/atoms/Input/index.tsx","../../../src/components/atoms/Options/index.tsx"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Check = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"20 6 9 17 4 12\"\n  }));\n});\nCheck.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nCheck.displayName = 'Check';\nexport default Check;","import { createContext, useContext } from 'react';\n\nimport styles from './index.module.scss';\nimport { cleanClassName } from '../../../utils';\n\ninterface CommonProps {\n  children?: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nexport interface InputContainerProps extends CommonProps {\n  validationMessage?: string | null;\n}\n\nconst InputContainerContext =\n  createContext<InputContainerProps['validationMessage']>(undefined);\n\nconst InputContainerMain = ({\n  children,\n  className,\n  validationMessage,\n  style,\n}: InputContainerProps) => (\n  <div\n    style={style}\n    className={cleanClassName(`${styles['input-container']} ${className}`)}\n  >\n    <InputContainerContext.Provider value={validationMessage}>\n      <div className={styles['input-interaction-wrap']}>{children}</div>\n    </InputContainerContext.Provider>\n    {validationMessage ? (\n      <p className={styles['validation-message']}>{validationMessage}</p>\n    ) : (\n      validationMessage === null && (\n        <div className={styles['validation-space']} />\n      )\n    )}\n  </div>\n);\n\nexport interface InputContainerIntreractionProps extends CommonProps {\n  onClick?: React.HTMLAttributes<HTMLDivElement>['onClick'];\n  size?: 'small' | 'medium' | 'large';\n  theme?: 'light' | 'dark';\n  readonly?: boolean;\n}\n\nconst InputContainerIntreraction = ({\n  children,\n  onClick,\n  size = 'medium',\n  className,\n  style,\n  theme = 'light',\n  readonly = false,\n}: InputContainerIntreractionProps) => {\n  const validationMessage = useContext(InputContainerContext);\n  return (\n    <div\n      style={style}\n      className={cleanClassName(\n        `${styles['input-wrap']} ${styles[theme]} ${\n          readonly && styles.readonly\n        } ${validationMessage && styles.error} ${\n          styles[`size-${size}`]\n        } ${className}`,\n      )}\n      onClick={onClick}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport const InputContainer = Object.assign(InputContainerMain, {\n  Intreraction: InputContainerIntreraction,\n});\n","import type { Ref } from 'react';\nimport { useState, useMemo, forwardRef } from 'react';\n\nimport styles from './index.module.scss';\nimport { cleanClassName } from '../../../utils';\n\nexport interface InputProps\n  extends Pick<\n    React.DetailedHTMLProps<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      HTMLInputElement\n    >,\n    'placeholder' | 'onFocus' | 'id' | 'onClick' | 'style'\n  > {\n  type?:\n    | 'text'\n    | 'number'\n    | 'large-number'\n    | 'phone-number'\n    | 'password'\n    | 'button';\n  value?: number | string;\n  disabled?: boolean;\n  onChange?: (value: string) => void;\n  ref?: Ref<HTMLInputElement>;\n  name?: string;\n  className?: string;\n}\n\nexport const Input: (props: InputProps) => JSX.Element | null = forwardRef(\n  (\n    {\n      type = 'text',\n      placeholder = '',\n      disabled = false,\n      value,\n      onChange,\n      onClick,\n      id,\n      onFocus,\n      name,\n      className,\n      style,\n    },\n    ref,\n  ) => {\n    const [isFocused, setIsFucused] = useState(false);\n\n    const formatedValue = (() => {\n      if (type === 'button' && !value) return placeholder;\n\n      if (value !== 0 && !value) return '';\n\n      const valueString = String(value);\n\n      if (isFocused) return valueString;\n\n      switch (type) {\n        case 'number':\n          return valueString;\n\n        case 'large-number':\n          return Number(valueString).toLocaleString();\n\n        case 'phone-number':\n          if (valueString.length === 10)\n            return valueString.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3');\n          return valueString.replace(/(\\d{3})(\\d{4})(\\d{4})/, '$1-$2-$3');\n\n        default:\n          return valueString;\n      }\n    })();\n\n    const convertChangeHandlerParam = useMemo((): ((\n      value: string,\n    ) => string) => {\n      const leftOnlyNumber = (value: string) => value.replace(/[^0-9]/g, '');\n      switch (type) {\n        case 'number':\n        case 'large-number':\n          return (value) => value && leftOnlyNumber(value);\n\n        case 'phone-number':\n          return (value) => {\n            let numberString = leftOnlyNumber(value);\n            if (numberString.length > 11)\n              numberString = numberString.slice(0, 11);\n\n            return value && numberString;\n          };\n\n        default:\n          return (value) => value;\n      }\n    }, [type]);\n\n    return (\n      <input\n        id={id}\n        name={name}\n        ref={ref}\n        onFocus={(e) => {\n          setIsFucused(true);\n          onFocus?.(e);\n        }}\n        onBlur={() => setIsFucused(false)}\n        type={type}\n        placeholder={placeholder}\n        onClick={onClick}\n        value={formatedValue}\n        style={style}\n        className={cleanClassName(\n          `${styles.input} ${type === 'button' && styles.button} ${\n            value || styles.empty\n          } ${styles['default-width']} ${className}`,\n        )}\n        disabled={!!disabled}\n        onChange={({ target: { value } }) =>\n          onChange?.(convertChangeHandlerParam(value))\n        }\n      />\n    );\n  },\n);\n","import { createRef, useMemo, useState, useEffect } from 'react';\nimport { Check } from 'react-feather';\n\nimport styles from './index.module.scss';\nimport { cleanClassName } from '../../../utils';\n\ntype ValidOptionValue = string | number | undefined;\n\nexport interface Option<\n  _OptionValue extends ValidOptionValue = ValidOptionValue,\n> {\n  label: string;\n  value: _OptionValue;\n}\n\ntype OptionsValue<_Option, _Multiple> = _Multiple extends true\n  ? _Option[]\n  : _Option;\n\nexport interface OptionsProps<\n  _Option extends Option = Option,\n  _Multiple extends boolean = false,\n> {\n  opened?: boolean;\n  style?: React.CSSProperties;\n  options?: _Option[];\n  multiple?: _Multiple;\n  value?: OptionsValue<_Option, _Multiple>;\n  onSelect?: (option?: OptionsValue<_Option, _Multiple>) => void;\n  onKeyDown?: (event: KeyboardEvent) => void;\n  float?: 'top' | 'bottom';\n  className?: string;\n  theme?: 'light' | 'dark';\n}\n\nexport const Options = <\n  _Option extends Option = Option,\n  _Multiple extends boolean = false,\n>({\n  opened = false,\n  options,\n  multiple,\n  value,\n  onSelect,\n  onKeyDown,\n  float = 'bottom',\n  className,\n  style,\n  theme = 'light',\n}: OptionsProps<_Option, _Multiple>) => {\n  const refList = useMemo(\n    () => options?.map(() => createRef<HTMLButtonElement>()),\n    [options],\n  );\n\n  const optionData = useMemo(\n    () =>\n      refList &&\n      options?.map((option, index) => {\n        let isAlreadySelected = false;\n\n        if (value) {\n          isAlreadySelected =\n            value instanceof Array\n              ? value.some(\n                  (selectedOption) =>\n                    option.value === selectedOption.value &&\n                    option.label === selectedOption.label,\n                )\n              : value.value === option.value && value.label === option.label;\n        }\n\n        return {\n          option,\n          ref: refList[index],\n          isAlreadySelected,\n        };\n      }),\n    [options, refList, value],\n  );\n\n  const [optionIndexForSelect, setOptionIndexForSelect] = useState(-1);\n\n  const [openState, setOpenState] = useState<boolean | 'closing' | 'opening'>(\n    opened,\n  );\n\n  useEffect(() => {\n    setOpenState((prevOpenState) => {\n      if (prevOpenState !== opened) return opened ? 'opening' : 'closing';\n\n      return prevOpenState;\n    });\n  }, [opened]);\n\n  const isChangeOpenState = typeof openState === 'string';\n\n  useEffect(() => {\n    if (isChangeOpenState) {\n      const nextOpenState = openState === 'opening';\n      if (nextOpenState) {\n        setOptionIndexForSelect(-1);\n\n        const firstSelectedOptionRef = optionData?.find(\n          ({ isAlreadySelected }) => isAlreadySelected,\n        )?.ref;\n\n        if (firstSelectedOptionRef) {\n          firstSelectedOptionRef.current?.scrollIntoView({\n            block: 'start',\n          });\n        }\n      }\n      const timeout = setTimeout(() => setOpenState(nextOpenState), 250);\n      return () => clearTimeout(timeout);\n    }\n  }, [openState, isChangeOpenState, optionData]);\n\n  const optionDataForSelect = optionData?.[optionIndexForSelect];\n\n  const handleSelect = useMemo(\n    () =>\n      onSelect &&\n      ((multiple\n        ? (value, optionForSelect, isAlreadySelected) => {\n            const selectedOptions = value as _Option[] | undefined;\n            const handleSelect = onSelect as (option?: _Option[]) => void;\n\n            if (!selectedOptions) return handleSelect([optionForSelect]);\n\n            return handleSelect(\n              isAlreadySelected\n                ? selectedOptions.filter(\n                    ({ label, value }) =>\n                      label !== optionForSelect.label ||\n                      value !== optionForSelect.value,\n                  )\n                : [...selectedOptions, optionForSelect],\n            );\n          }\n        : (value, optionForSelect, isAlreadySelected) => {\n            const selectedOption = value as _Option | undefined;\n            const handleSelect = onSelect as (option?: _Option) => void;\n\n            if (!selectedOption) return handleSelect(optionForSelect);\n\n            return handleSelect(\n              isAlreadySelected ? undefined : optionForSelect,\n            );\n          }) satisfies (\n        _value: typeof value,\n        _optionForSelect: _Option,\n        _isAlreadySelected: boolean,\n      ) => void),\n    [multiple, onSelect],\n  );\n\n  const [mouseHoverLock, setMouseHoverLock] = useState(false);\n  const [keyboardEventLock, setKeyboardEventLock] = useState(true);\n\n  useEffect(() => {\n    if (openState === true && !keyboardEventLock && optionData) {\n      const keyboardEvent = (event: KeyboardEvent) => {\n        const { key } = event;\n        switch (key) {\n          case 'Enter':\n            event.preventDefault();\n            return (\n              optionDataForSelect &&\n              handleSelect?.(\n                value,\n                optionDataForSelect.option,\n                optionDataForSelect.isAlreadySelected,\n              )\n            );\n\n          case 'ArrowUp':\n          case 'ArrowDown':\n            setMouseHoverLock(true);\n            event.preventDefault();\n\n            return setOptionIndexForSelect((prevIndex) => {\n              if (key === 'ArrowDown') {\n                prevIndex =\n                  prevIndex < optionData.length - 1 ? prevIndex + 1 : prevIndex;\n              } else prevIndex = prevIndex > 0 ? prevIndex - 1 : 0;\n\n              optionData[prevIndex].ref.current?.scrollIntoView({\n                block: 'start',\n              });\n\n              return prevIndex;\n            });\n\n          default:\n            return onKeyDown?.(event);\n        }\n      };\n\n      document.addEventListener('keydown', keyboardEvent);\n      return () => document.removeEventListener('keydown', keyboardEvent);\n    }\n  }, [\n    handleSelect,\n    onKeyDown,\n    openState,\n    optionData,\n    optionDataForSelect,\n    value,\n    keyboardEventLock,\n  ]);\n\n  return openState && optionData?.length ? (\n    <section\n      style={style}\n      className={cleanClassName(\n        `${styles.options} ${styles[theme]} ${styles[float]} ${\n          isChangeOpenState && styles[openState]\n        } ${className}`,\n      )}\n      onMouseEnter={() => setKeyboardEventLock(false)}\n      onMouseLeave={() => setKeyboardEventLock(true)}\n    >\n      <ul\n        className={cleanClassName(\n          `${styles['option-container']} ${\n            !mouseHoverLock && styles['mouse-hover-enabled']\n          }`,\n        )}\n      >\n        {optionData.map(({ option, ref, isAlreadySelected }, index) => (\n          <li key={index}>\n            <button\n              type=\"button\"\n              ref={ref}\n              className={cleanClassName(\n                `${styles['option-item']} ${\n                  mouseHoverLock &&\n                  optionIndexForSelect === index &&\n                  styles.hovered\n                } ${isAlreadySelected && styles.selected}`,\n              )}\n              onClick={() => handleSelect?.(value, option, isAlreadySelected)}\n              onMouseEnter={() =>\n                openState === true &&\n                !mouseHoverLock &&\n                setOptionIndexForSelect(index)\n              }\n              onMouseMove={() => setMouseHoverLock(false)}\n            >\n              <div>{option.label}</div>\n              {multiple ? (\n                <div className={styles['check-icon-wrap']}>\n                  {isAlreadySelected ? <Check /> : null}\n                </div>\n              ) : null}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </section>\n  ) : (\n    <></>\n  );\n};\n"],"names":["_extends","target","i","source","key","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","sourceKeys","Check","forwardRef","_ref","ref","_ref$color","color","_ref$size","size","rest","React","PropTypes","Check$1","InputContainerContext","createContext","InputContainerMain","children","className","validationMessage","style","jsxs","cleanClassName","styles","jsx","InputContainerIntreraction","onClick","theme","readonly","useContext","InputContainer","Input","type","placeholder","disabled","value","onChange","id","onFocus","name","isFocused","setIsFucused","useState","formatedValue","valueString","convertChangeHandlerParam","useMemo","leftOnlyNumber","value2","numberString","e","Options","opened","options","multiple","onSelect","onKeyDown","float","refList","createRef","optionData","option","index","isAlreadySelected","selectedOption","optionIndexForSelect","setOptionIndexForSelect","openState","setOpenState","useEffect","prevOpenState","isChangeOpenState","nextOpenState","firstSelectedOptionRef","_a","_b","timeout","optionDataForSelect","handleSelect","optionForSelect","selectedOptions","handleSelect2","label","value3","mouseHoverLock","setMouseHoverLock","keyboardEventLock","setKeyboardEventLock","keyboardEvent","event","prevIndex","Fragment"],"mappings":"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","x_google_ignoreList":[0]}