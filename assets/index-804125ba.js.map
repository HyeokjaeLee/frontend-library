{"version":3,"file":"index-804125ba.js","sources":["../../../src/components/molecules/Textbox/index.tsx"],"sourcesContent":["import type { InputProps, InputWrapProps } from '@components/atoms';\nimport { Input } from '@components/atoms';\nimport { useSubscribedState, useValidationMessage } from '@hooks';\nimport type { ValidateHandler, InputType, FixedDarkMode } from '@hooks';\nimport { InnerStateChangeEventHandler, Size } from '@types';\nimport { cleanClassName } from '@utils';\n\nimport styles from './index.module.scss';\n\nexport interface TextboxProps\n  extends Omit<\n      InputProps,\n      'className' | 'size' | 'style' | 'value' | 'onChange'\n    >,\n    Pick<InputWrapProps, 'className' | 'style' | 'reversed' | 'label'> {\n  value?: string;\n  onChange?: InnerStateChangeEventHandler<string>;\n  validation?: ValidateHandler<TextboxProps['value']>;\n  children?: React.ReactNode;\n  type?: Exclude<InputType, 'button'>;\n  size?: Size;\n  fixedDarkMode?: FixedDarkMode;\n}\n\nexport const Textbox = ({\n  //* Textbox props\n  value,\n  onChange,\n  validation,\n  children,\n  type,\n  size,\n  fixedDarkMode,\n\n  //* Input.Wrap props\n  className,\n  style,\n  reversed,\n  label,\n\n  //* Input props\n  ...restInputProps\n}: TextboxProps) => {\n  const [inputValue, setInputValue, preventInnerStateChange] =\n    useSubscribedState(value);\n\n  const { id } = restInputProps;\n\n  const { validationMessage, validateOnChange } = useValidationMessage({\n    validateHandler: validation,\n    value: inputValue,\n    key: id,\n  });\n\n  return (\n    <Input.Wrap\n      size={size}\n      validationMessage={validationMessage}\n      className={className}\n      style={style}\n      reversed={reversed}\n      label={label}\n      fixedDarkMode={fixedDarkMode}\n    >\n      <Input\n        {...restInputProps}\n        type={type}\n        value={inputValue}\n        onChange={({ value }) => {\n          onChange?.({\n            value,\n            preventInnerStateChange,\n          });\n          setInputValue(value);\n          validateOnChange?.(value);\n        }}\n      />\n      {children ? (\n        <div className={cleanClassName(`${styles.decoration}`)}>{children}</div>\n      ) : null}\n    </Input.Wrap>\n  );\n};\n"],"names":["Textbox","value","onChange","validation","children","type","size","fixedDarkMode","className","style","reversed","label","restInputProps","inputValue","setInputValue","preventInnerStateChange","useSubscribedState","id","validationMessage","validateOnChange","useValidationMessage","jsxs","Input","jsx","value2","cleanClassName","styles"],"mappings":"6nCAwBOA,EAAA,CAAA,CAAiB,MAAAC,EAEtB,SAAAC,EACA,WAAAC,EACA,SAAAC,EACA,KAAAC,EACA,KAAAC,EACA,cAAAC,EACA,UAAAC,EAGA,MAAAC,EACA,SAAAC,EACA,MAAAC,EACA,GAAAC,CAIF,IAAA,CACE,KAAA,CAAAC,EAAAC,EAAAC,CAAA,EAAAC,EAAAf,CAAA,EAGA,CAAA,GAAAgB,CAAA,EAAAL,EAEA,CAAA,kBAAAM,EAAA,iBAAAC,CAAA,EAAAC,EAAA,CAAqE,gBAAAjB,EAClD,MAAAU,EACV,IAAAI,CACF,CAAA,EAGP,OAAAI,EAAA,KACEC,EAAA,KAAO,CAAN,KAAAhB,EACC,kBAAAY,EACA,UAAAV,EACA,MAAAC,EACA,SAAAC,EACA,MAAAC,EACA,cAAAJ,EACA,SAAA,CAEAgB,EAAA,IAAAD,EAAC,CAAA,GAAAV,EACK,KAAAP,EACJ,MAAAQ,EACO,SAAA,CAAA,CAAA,MAAAW,KAAA,CAELtB,GAAA,MAAAA,EAAA,CAAW,MAAAsB,EACT,wBAAAT,CACA,GAEFD,EAAAU,CAAA,EACAL,GAAA,MAAAA,EAAAK,EAAwB,CAC1B,CAAA,EACFpB,EAAAmB,EAAAA,IAAA,MAAA,CAAA,UAAAE,EAAA,GAAAC,EAAA,UAAA,EAAA,EAAA,SAAAtB,CAAA,CAAA,EAAA,IAGI,CAAA,CAAA,CAGV"}