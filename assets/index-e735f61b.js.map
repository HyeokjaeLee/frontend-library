{"version":3,"file":"index-e735f61b.js","sources":["../../../src/contexts/InputContext.tsx","../../../src/components/atoms/Input/inputWrap.tsx","../../../src/components/atoms/Input/index.tsx"],"sourcesContent":["import { createContext, useContext } from 'react';\nimport type { Dispatch, SetStateAction } from 'react';\n\nexport const InputContext = createContext<\n  undefined | Dispatch<SetStateAction<boolean>>\n>(undefined);\n\nexport const useInputContext = () => {\n  const context = useContext(InputContext);\n\n  if (context === undefined) {\n    throw new Error(\n      'useInputContext must be used within a InputContextProvider',\n    );\n  }\n\n  return { setReadonly: context };\n};\n","import { useState } from 'react';\n\nimport { InputContext } from '@contexts/InputContext';\nimport { useDarkMode, useInputMessageDynamicHeight } from '@hooks';\nimport type { HTMLTagProps } from '@types';\nimport { cleanClassName } from '@utils';\n\nimport styles from './InputWrap.module.scss';\n\nexport type InputWrapProps = Omit<HTMLTagProps<'div'>, 'size'> & {\n  size?: 'small' | 'medium' | 'large';\n  validationMessage?: string;\n};\n\nexport const InputWrap = ({\n  //* Input.Container props\n  size = 'medium',\n  validationMessage,\n\n  //* HTML div props\n  children,\n  ...restDivProps\n}: InputWrapProps) => {\n  const { messageRef, messageWrapHeight } =\n    useInputMessageDynamicHeight(validationMessage);\n\n  const [readonly, setReadonly] = useState(false);\n\n  const { isDarkMode } = useDarkMode();\n\n  return (\n    <div {...restDivProps}>\n      <div\n        className={cleanClassName(\n          `${styles['input-wrap']} ${isDarkMode && styles.dark} ${\n            validationMessage && styles.error\n          } ${styles[`size-${size}`]} ${readonly && styles.readonly}`,\n        )}\n      >\n        <InputContext.Provider value={setReadonly}>\n          {children}\n        </InputContext.Provider>\n      </div>\n      <div\n        className={cleanClassName(\n          `${styles['validation-message-wrap']} ${\n            messageWrapHeight && styles.show\n          }`,\n        )}\n        style={messageWrapHeight}\n      >\n        {validationMessage ? (\n          <p ref={messageRef} className={styles['validation-message']}>\n            {validationMessage}\n          </p>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\n\nimport { useInputContext } from '@contexts/InputContext';\nimport { useFormatInputValue } from '@hooks';\nimport type { InputType } from '@hooks';\nimport type { HTMLTagProps } from '@types';\nimport { cleanClassName } from '@utils';\n\nimport styles from './index.module.scss';\nimport { InputWrap } from './inputWrap';\n\nexport type { InputWrapProps } from './inputWrap';\n\nexport interface InputProps\n  extends Omit<\n    HTMLTagProps<'input'>,\n    'type' | 'value' | 'disabled' | 'onChange' | 'width' | 'height'\n  > {\n  type?: InputType;\n  value?: number | string;\n  disabled?: boolean | 'readonly';\n  onChange?: (value: string) => void;\n}\n\nexport const Input = Object.assign(\n  ({\n    //* Input props\n    type = 'text',\n    value,\n    disabled = false,\n    onChange,\n\n    //* HTML input props\n    placeholder,\n    className,\n    onFocus,\n    onBlur,\n    ...restInputProps\n  }: InputProps) => {\n    const { setReadonly } = useInputContext();\n    const isReadonly = disabled === 'readonly';\n\n    useEffect(() => setReadonly(isReadonly), [isReadonly, setReadonly]);\n\n    const {\n      formattedValue,\n      displayFormattedValue,\n      displayOriginalValue,\n      convertChangeHandlerParam,\n    } = useFormatInputValue({\n      type,\n      value,\n      placeholder,\n    });\n\n    return (\n      <input\n        {...restInputProps}\n        onFocus={(e) => {\n          displayOriginalValue();\n          onFocus?.(e);\n        }}\n        onBlur={(e) => {\n          displayFormattedValue();\n          onBlur?.(e);\n        }}\n        type={type}\n        placeholder={placeholder}\n        value={formattedValue}\n        className={cleanClassName(\n          `${styles.input} ${type === 'button' && styles.button} ${\n            !value && styles.empty\n          } ${className}`,\n        )}\n        disabled={!!disabled}\n        onChange={({ target: { value } }) => {\n          const convertedValue = convertChangeHandlerParam(value);\n          if (convertedValue !== null) onChange?.(convertedValue);\n        }}\n      />\n    );\n  },\n  {\n    Wrap: InputWrap,\n  },\n);\n"],"names":["InputContext","createContext","useInputContext","context","useContext","InputWrap","size","validationMessage","children","restDivProps","messageRef","messageWrapHeight","useInputMessageDynamicHeight","readonly","setReadonly","useState","isDarkMode","useDarkMode","jsxs","jsx","cleanClassName","styles","Input","type","value","disabled","onChange","placeholder","className","onFocus","onBlur","restInputProps","isReadonly","useEffect","formattedValue","displayFormattedValue","displayOriginalValue","convertChangeHandlerParam","useFormatInputValue","e","value2","convertedValue"],"mappings":"qLAGa,MAAAA,EAAeC,EAAAA,cAE1B,MAAS,EAEEC,EAAkB,IAAM,CAC7B,MAAAC,EAAUC,aAAWJ,CAAY,EAEvC,GAAIG,IAAY,OACd,MAAM,IAAI,MACR,4DAAA,EAIG,MAAA,CAAE,YAAaA,EACxB,4uDCHOE,EAAA,CAAA,CAAmB,KAAAC,EAAA,SAEjB,kBAAAC,EACP,SAAAC,EAGA,GAAAC,CAEF,IAAA,CACE,KAAA,CAAA,WAAAC,EAAA,kBAAAC,CAAA,EAAAC,EAAAL,CAAA,EAGA,CAAAM,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEA,CAAA,WAAAC,GAAAC,IAEA,OAAAC,EAAA,KAAA,MAAA,CAAA,GAAAT,EAAA,SAAA,CAEIU,EAAA,IAAA,MAAC,CAAA,UAAAC,EACY,GAAAC,EAAA,YAAA,KAAAL,GAAAK,EAAA,QAAAd,GAAAc,EAAA,SAAAA,EAAA,QAAAf,GAAA,KAAAO,GAAAQ,EAAA,UAGwC,EACnD,SAAAF,EAAA,IAAAnB,EAAA,SAAA,CAAA,MAAAc,EAAA,SAAAN,EAAA,CAIA,CAAA,EACFW,EAAA,IACA,MAAC,CAAA,UAAAC,EACY,GAAAC,EAAA,yBAAA,KAAAV,GAAAU,EAAA,MAEqB,EAEhC,MAAAV,EACO,SAAAJ,EAAAY,EAAAA,IAAA,IAAA,CAAA,IAAAT,EAAA,UAAAW,EAAA,oBAAA,EAAA,SAAAd,CAAA,CAAA,EAAA,IAMH,CAAA,CACN,CAAA,CAAA,CAGN,oXCnCO,MAAAe,EAAA,OAAA,OAAqB,CAAA,CACzB,KAAAC,EAAA,OAEQ,MAAAC,EACP,SAAAC,EAAA,GACW,SAAAC,EACX,YAAAC,EAGA,UAAAC,EACA,QAAAC,EACA,OAAAC,EACA,GAAAC,CACG,IAAA,CAEH,KAAA,CAAA,YAAAjB,GAAAZ,IACA8B,EAAAP,IAAA,WAEAQ,EAAA,UAAA,IAAAnB,EAAAkB,CAAA,EAAA,CAAAA,EAAAlB,CAAA,CAAA,EAEA,KAAA,CAAM,eAAAoB,EACJ,sBAAAC,EACA,qBAAAC,EACA,0BAAAC,CACA,EAAAC,EAAA,CACsB,KAAAf,EACtB,MAAAC,EACA,YAAAG,CACA,CAAA,EAGF,OAAAR,EAAA,IACE,QAAC,CAAA,GAAAY,EACK,QAAAQ,GAAA,CAEFH,IACAP,GAAA,MAAAA,EAAAU,EAAW,EACb,OAAAA,GAAA,CAEEJ,IACAL,GAAA,MAAAA,EAAAS,EAAU,EACZ,KAAAhB,EACA,YAAAI,EACA,MAAAO,EACO,UAAAd,EACI,GAAAC,EAAA,SAAAE,IAAA,UAAAF,EAAA,UAAA,CAAAG,GAAAH,EAAA,SAAAO,GAGL,EACN,SAAA,CAAA,CAAAH,EACY,SAAA,CAAA,CAAA,OAAA,CAAA,MAAAe,CAAA,CAAA,IAAA,CAEV,MAAAC,EAAAJ,EAAAG,CAAA,EACAC,IAAA,OAA6Bf,GAAA,MAAAA,EAAAe,GAAyB,CACxD,CAAA,CACF,EAEJ,CACA,KAAApC,CACQ,CAEV"}