{"version":3,"file":"index-6217c5ee.js","sources":["../../../src/hooks/private/useTooltipCloseOnScroll.tsx","../../../src/components/atoms/Tooltip/TooltipArea.tsx","../../../src/components/atoms/Tooltip/TooltipContent.tsx","../../../src/components/atoms/Tooltip/index.tsx"],"sourcesContent":["import { useEffect } from 'react';\n\nimport { useTooltipContext } from '@contexts/TooltipContext';\n\nexport const useTooltipCloseOnScroll = () => {\n  const {\n    tooltipState: [, setOpeningTransition],\n  } = useTooltipContext();\n\n  useEffect(() => {\n    const scrollEventHandler = () => setOpeningTransition(false, true);\n    document.addEventListener('scroll', scrollEventHandler);\n    return () => document.removeEventListener('scroll', scrollEventHandler);\n  }, [setOpeningTransition]);\n};\n","import { useTooltipContext } from '@contexts/TooltipContext';\nimport { useTooltipCloseOnScroll } from '@hooks';\nimport { HTMLTagProps } from '@types';\nimport { cleanClassName } from '@utils';\n\nimport styles from './TooltipArea.module.scss';\n\nexport type TooltipAreaProps = HTMLTagProps<'div'>;\n\nexport const TooltipArea = ({\n  children,\n  className,\n  onMouseMove,\n  onMouseLeave,\n  ...restDivProps\n}: TooltipAreaProps) => {\n  const {\n    tooltipState: [, setOpeningTransition],\n    locationState: [, dispatchLocation],\n  } = useTooltipContext();\n\n  useTooltipCloseOnScroll();\n\n  return (\n    <div\n      {...restDivProps}\n      onMouseLeave={(e) => {\n        setOpeningTransition(false);\n        onMouseLeave?.(e);\n      }}\n      className={cleanClassName(`${styles.tooltip} ${className}`)}\n      onMouseMove={(e) => {\n        setOpeningTransition(true);\n        dispatchLocation(e);\n        onMouseMove?.(e);\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n","import { createPortal } from 'react-dom';\n\nimport { useTooltipContext } from '@contexts/TooltipContext';\nimport { useDarkMode, OPENING_TRANSITION } from '@hooks';\nimport type { HTMLTagProps } from '@types';\nimport { cleanClassName } from '@utils';\n\nimport styles from './TooltipContent.module.scss';\n\nexport interface TooltipContentProps\n  extends Omit<HTMLTagProps<'div'>, 'styles'> {\n  style?: Omit<React.CSSProperties, 'left' | 'top'>;\n}\n\nexport const TooltipContent = ({\n  //* TooltipContent props\n  style,\n\n  //* HTML div props\n  children,\n  className,\n  onMouseEnter,\n  onMouseLeave,\n  ...restDivProps\n}: TooltipContentProps) => {\n  const {\n    tooltipState: [openingTransition, setOpeningTransition],\n    locationState: [location],\n  } = useTooltipContext();\n\n  const { isDarkMode } = useDarkMode();\n\n  const darkModeClassName = isDarkMode && styles.dark;\n\n  return openingTransition\n    ? createPortal(\n        <div\n          {...restDivProps}\n          onMouseEnter={(e) => {\n            setOpeningTransition(true);\n            onMouseEnter?.(e);\n          }}\n          onMouseLeave={(e) => {\n            setOpeningTransition(false);\n            onMouseLeave?.(e);\n          }}\n          className={`${styles['tooltip-message-container']} ${\n            openingTransition === OPENING_TRANSITION.CLOSING && styles.closing\n          }`}\n          style={{\n            ...style,\n            left: location.left,\n            top: location.top,\n          }}\n        >\n          <div\n            className={cleanClassName(\n              `${styles.triangle} ${darkModeClassName}`,\n            )}\n          />\n          <div\n            className={cleanClassName(\n              `${styles['tooltip-message-wrap']} ${darkModeClassName} ${className}`,\n            )}\n          >\n            {children}\n          </div>\n        </div>,\n        document.body,\n      )\n    : null;\n};\n","import { TooltipContextProvider } from '@contexts/TooltipContext';\n\nimport { TooltipArea } from './TooltipArea';\nimport { TooltipContent } from './TooltipContent';\n\nexport type { TooltipContextProviderProps as TooltipProps } from '@contexts/TooltipContext';\nexport type { TooltipAreaProps } from './TooltipArea';\nexport type { TooltipContentProps } from './TooltipContent';\n\nexport const Tooltip = Object.assign(TooltipContextProvider, {\n  Area: TooltipArea,\n  Content: TooltipContent,\n});\n"],"names":["useTooltipCloseOnScroll","setOpeningTransition","useTooltipContext","useEffect","scrollEventHandler","TooltipArea","children","className","onMouseMove","onMouseLeave","restDivProps","dispatchLocation","jsx","cleanClassName","styles","TooltipContent","style","onMouseEnter","openingTransition","location","isDarkMode","useDarkMode","darkModeClassName","createPortal","jsxs","e","OPENING_TRANSITION","Tooltip","TooltipContextProvider"],"mappings":"kPAIO,MAAMA,EAA0B,IAAM,CACrC,KAAA,CACJ,aAAc,CAAG,CAAAC,CAAoB,GACnCC,EAAkB,EAEtBC,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAqB,IAAMH,EAAqB,GAAO,EAAI,EACxD,gBAAA,iBAAiB,SAAUG,CAAkB,EAC/C,IAAM,SAAS,oBAAoB,SAAUA,CAAkB,CAAA,EACrE,CAACH,CAAoB,CAAC,CAC3B,0pBCLOI,EAAA,CAAA,CAAqB,SAAAC,EAC1B,UAAAC,EACA,YAAAC,EACA,aAAAC,EACA,GAAAC,CAEF,IAAA,CACE,KAAA,CAAM,aAAA,CAAA,CAAAT,CAAA,EACiC,cAAA,CAAA,CAAAU,CAAA,CACH,EAAAT,EAAA,EAGpC,OAAAF,IAEAY,EAAA,IACE,MAAC,CAAA,GAAAF,EACK,aAAA,GAAA,CAEFT,EAAA,EAAA,EACAQ,GAAA,MAAAA,EAAA,EAAgB,EAClB,UAAAI,EAAA,GAAAC,EAAA,WAAAP,GAAA,EAC0D,YAAA,GAAA,CAExDN,EAAA,EAAA,EACAU,EAAA,CAAA,EACAH,GAAA,MAAAA,EAAA,EAAe,EACjB,SAAAF,CAEC,CAAA,CAGP,o8BC1BOS,EAAA,CAAA,CAAwB,MAAAC,EAE7B,SAAAV,EAGA,UAAAC,EACA,aAAAU,EACA,aAAAR,EACA,GAAAC,CAEF,IAAA,CACE,KAAA,CAAM,aAAA,CAAAQ,EAAAjB,CAAA,EACkD,cAAA,CAAAkB,CAAA,CAC9B,EAAAjB,EAAA,EAG1B,CAAA,WAAAkB,GAAAC,IAEAC,EAAAF,GAAAN,EAAA,KAEA,OAAAI,EAAAK,EAAA,aACIC,EAAA,KACE,MAAC,CAAA,GAAAd,EACK,aAAAe,GAAA,CAEFxB,EAAA,EAAA,EACAgB,GAAA,MAAAA,EAAAQ,EAAgB,EAClB,aAAAA,GAAA,CAEExB,EAAA,EAAA,EACAQ,GAAA,MAAAA,EAAAgB,EAAgB,EAClB,UAAA,GAAAX,EAAA,2BAAA,KAAAI,IAAAQ,EAAA,SAAAZ,EAAA,UAE6D,MAAA,CAEtD,GAAAE,EACF,KAAAG,EAAA,KACY,IAAAA,EAAA,GACD,EAChB,SAAA,CAEAP,EAAA,IAAA,MAAC,CAAA,UAAAC,EACY,GAAAC,EAAA,YAAAQ,GACa,CACxB,CAAA,EACFV,EAAA,IACA,MAAC,CAAA,UAAAC,EACY,GAAAC,EAAA,sBAAA,KAAAQ,KAAAf,GACiD,EAC5D,SAAAD,CAEC,CAAA,CACH,CAAA,CAAA,EACF,SAAA,IACS,EAAA,IAGjB,qOC9DO,MAAAqB,EAAA,OAAA,OAAAC,EAAA,CAAsD,KAAAvB,EACrD,QAAAU,CAER,CAAA"}