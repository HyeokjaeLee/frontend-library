{"version":3,"file":"index.stories-e418f836.js","sources":["../../../src/hooks/private/useClosableOnClickOpeningState.tsx","../../../src/components/molecules/Selectbox/index.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const useClosableOnClickOpeningState = () => {\n  const openingState = useState(false);\n  const [opened, setOpened] = openingState;\n\n  let closable = false;\n\n  useEffect(() => {\n    if (opened) {\n      const handleClickedOutside = () => {\n        if (closable) setOpened(false);\n      };\n\n      window.addEventListener('click', handleClickedOutside);\n      return () => window.removeEventListener('click', handleClickedOutside);\n    }\n  }, [closable, opened, setOpened]);\n\n  return {\n    openingState,\n    setClosableOnClick: (value: boolean) => {\n      closable = value;\n    },\n  };\n};\n","import { ChevronDown } from 'react-feather';\n\nimport type {\n  InputProps,\n  SelectProps,\n  InputWrapProps,\n} from '@components/atoms';\nimport { Select, Input } from '@components/atoms';\nimport type { ValidOptionValue, ValidateHandler } from '@hooks';\nimport {\n  useSubscribedState,\n  useValidationMessage,\n  useClosableOnClickOpeningState,\n} from '@hooks';\nimport { InputDisabled, Size } from '@types';\nimport { cleanClassName } from '@utils';\n\nimport styles from './index.module.scss';\n\nexport interface SelectboxProps<\n  TValidOptionValue extends ValidOptionValue = ValidOptionValue,\n  TMultiple extends boolean = false,\n> extends Omit<\n      InputProps,\n      | 'style'\n      | 'className'\n      | 'onChange'\n      | 'value'\n      | 'multiple'\n      | 'type'\n      | 'disabled'\n    >,\n    Pick<InputWrapProps, 'reversed' | 'className' | 'style'>,\n    Pick<\n      SelectProps<TValidOptionValue, TMultiple>,\n      'options' | 'float' | 'onChange' | 'value' | 'multiple'\n    > {\n  disabled?: InputDisabled;\n  size?: Size;\n  validation?: ValidateHandler<\n    SelectboxProps<TValidOptionValue, TMultiple>['value']\n  >;\n  children?: React.ReactNode;\n}\n\nexport const Selectbox = <\n  TValidOptionValue extends ValidOptionValue = ValidOptionValue,\n  TMultiple extends boolean = false,\n>({\n  //* Selectbox props\n  disabled,\n  size,\n  validation,\n  children,\n\n  //* Input.Wrap props\n  reversed,\n  className,\n  style,\n\n  //* Select props\n  options,\n  float,\n  onChange,\n  value,\n  multiple,\n\n  //* Input props\n  onClick,\n  placeholder,\n  id,\n  ...restInputProps\n}: SelectboxProps<TValidOptionValue, TMultiple>) => {\n  const [selectedValue, setSelectedValue] = useSubscribedState(value);\n\n  const selectedOption = options?.find(({ value }) => value === selectedValue);\n\n  const { validationMessage, validateValue } = useValidationMessage({\n    validateHandler: validation,\n    value: selectedValue,\n    id,\n  });\n\n  const {\n    openingState: [opened, setOpened],\n    setClosableOnClick,\n  } = useClosableOnClickOpeningState();\n\n  const decoration = children ?? (\n    <ChevronDown\n      onClick={disabled ? undefined : () => setOpened((prev) => !prev)}\n      className={cleanClassName(\n        `${styles['selectbox-icon']} ${\n          (float === 'top' ? !opened : opened) && styles.reversed\n        } ${disabled && styles.disabled}`,\n      )}\n    />\n  );\n\n  return (\n    <Input.Wrap\n      validationMessage={validationMessage}\n      size={size}\n      style={style}\n      className={className}\n      reversed={reversed}\n      readonly={disabled === 'readonly'}\n      onMouseEnter={() => setClosableOnClick(false)}\n      onMouseLeave={() => setClosableOnClick(true)}\n    >\n      <Input\n        {...restInputProps}\n        id={id}\n        type=\"button\"\n        onClick={(e) => {\n          onClick?.(e);\n          setOpened((prev) => !prev);\n        }}\n        value={selectedOption?.label}\n        disabled={!!disabled}\n        placeholder={placeholder}\n      />\n      {decoration ? (\n        <div className={styles.decoration}>{decoration}</div>\n      ) : null}\n      <Select\n        opened={opened}\n        options={options}\n        multiple={multiple}\n        value={selectedValue}\n        float={float}\n        onChange={(value) => {\n          setSelectedValue(value);\n          validateValue(value);\n          onChange?.(value);\n          setOpened(false);\n        }}\n      />\n    </Input.Wrap>\n  );\n};\n"],"names":["useClosableOnClickOpeningState","openingState","useState","opened","setOpened","closable","useEffect","handleClickedOutside","value","Selectbox","disabled","size","validation","children","reversed","className","style","options","float","onChange","multiple","onClick","placeholder","id","restInputProps","selectedValue","setSelectedValue","useSubscribedState","selectedOption","value2","validationMessage","validateValue","useValidationMessage","setClosableOnClick","decoration","jsx","ChevronDown","prev","cleanClassName","styles","jsxs","Input","e","Select"],"mappings":"koBAEO,MAAMA,EAAiC,IAAM,CAC5C,MAAAC,EAAeC,WAAS,EAAK,EAC7B,CAACC,EAAQC,CAAS,EAAIH,EAE5B,IAAII,EAAW,GAEfC,OAAAA,EAAAA,UAAU,IAAM,CACd,GAAIH,EAAQ,CACV,MAAMI,EAAuB,IAAM,CAC7BF,GAAUD,EAAU,EAAK,CAAA,EAGxB,cAAA,iBAAiB,QAASG,CAAoB,EAC9C,IAAM,OAAO,oBAAoB,QAASA,CAAoB,EAEtE,EAAA,CAACF,EAAUF,EAAQC,CAAS,CAAC,EAEzB,CACL,aAAAH,EACA,mBAAqBO,GAAmB,CAC3BH,EAAAG,CACb,CAAA,CAEJ,mxBCoBOC,EAAA,CAAA,CAGL,SAAAC,EAEA,KAAAC,EACA,WAAAC,EACA,SAAAC,EACA,SAAAC,EAGA,UAAAC,EACA,MAAAC,EACA,QAAAC,EAGA,MAAAC,EACA,SAAAC,EACA,MAAAX,EACA,SAAAY,EACA,QAAAC,EAGA,YAAAC,EACA,GAAAC,EACA,GAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAAnB,CAAA,EAEAoB,EAAAX,GAAA,YAAAA,EAAA,KAAA,CAAA,CAAA,MAAAY,CAAA,IAAAA,IAAAJ,GAEA,CAAA,kBAAAK,EAAA,cAAAC,CAAA,EAAAC,EAAA,CAAkE,gBAAApB,EAC/C,MAAAa,EACV,GAAAF,CACP,CAAA,EAGF,CAAM,aAAA,CAAApB,EAAAC,CAAA,EAC4B,mBAAA6B,CAChC,EAAAjC,EAAA,EAGFkC,EAAArB,GAAAsB,EAAA,IACEC,EAAC,CAAA,QAAA1B,EAAA,OAAA,IAAAN,EAAAiC,GAAA,CAAAA,CAAA,EACgE,UAAAC,EACpD,GAAAC,EAAA,gBAAA,MAAArB,IAAA,MAAA,CAAAf,EAAAA,IAAAoC,EAAA,YAAA7B,GAAA6B,EAAA,UAGc,CACzB,CAAA,EAIJ,OAAAC,EAAA,KACEC,EAAA,KAAO,CAAN,kBAAAX,EACC,KAAAnB,EACA,MAAAK,EACA,UAAAD,EACA,SAAAD,EACA,SAAAJ,IAAA,WACuB,aAAA,IAAAuB,EAAA,EAAA,EACqB,aAAA,IAAAA,EAAA,EAAA,EACD,SAAA,CAE3CE,EAAA,IAAAM,EAAC,CAAA,GAAAjB,EACK,GAAAD,EACJ,KAAA,SACK,QAAAmB,GAAA,CAEHrB,GAAA,MAAAA,EAAAqB,GACAtC,EAAAiC,GAAA,CAAAA,CAAA,CAAyB,EAC3B,MAAAT,GAAA,YAAAA,EAAA,MACuB,SAAA,CAAA,CAAAlB,EACX,YAAAY,CACZ,CAAA,EACFY,EAAAC,EAAAA,IAAA,MAAA,CAAA,UAAAI,EAAA,WAAA,SAAAL,CAAA,CAAA,EAAA,KAGIC,EAAA,IACJQ,EAAC,CAAA,OAAAxC,EACC,QAAAc,EACA,SAAAG,EACA,MAAAK,EACO,MAAAP,EACP,SAAAW,GAAA,CAEEH,EAAAG,CAAA,EACAE,EAAAF,CAAA,EACAV,GAAA,MAAAA,EAAAU,GACAzB,EAAA,EAAA,CAAe,CACjB,CAAA,CACF,CAAA,CAAA,CAGN"}