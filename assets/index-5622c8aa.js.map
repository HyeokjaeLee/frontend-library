{"version":3,"file":"index-5622c8aa.js","sources":["../../../src/hooks/private/useClosableOnClickOpeningState.tsx","../../../src/components/molecules/Selectbox/index.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const useClosableOnClickOpeningState = () => {\n  const openingState = useState(false);\n  const [opened, setOpened] = openingState;\n\n  let closable = false;\n\n  useEffect(() => {\n    if (opened) {\n      const handleClickedOutside = () => {\n        if (closable) setOpened(false);\n      };\n\n      if (window) {\n        window.addEventListener('click', handleClickedOutside);\n        return () => window.removeEventListener('click', handleClickedOutside);\n      }\n    }\n  }, [closable, opened, setOpened]);\n\n  return {\n    openingState,\n    setClosableOnClick: (value: boolean) => {\n      closable = value;\n    },\n  };\n};\n","import { ChevronDown } from 'react-feather';\n\nimport type {\n  InputProps,\n  SelectProps,\n  InputWrapProps,\n  SelectChangeEvent,\n} from '@components/atoms';\nimport { Select, Input } from '@components/atoms';\nimport type { ValidOptionValue, ValidateHandler } from '@hooks';\nimport {\n  useSubscribedState,\n  useValidationMessage,\n  useClosableOnClickOpeningState,\n} from '@hooks';\nimport { InnerStateChangeEventHandler, Size } from '@types';\nimport { cleanClassName } from '@utils';\n\nimport styles from './index.module.scss';\n\nexport interface SelectboxProps<\n  TValidOptionValue extends ValidOptionValue = ValidOptionValue,\n  TMultiple extends boolean = false,\n  TCancelable extends boolean = true,\n> extends Omit<\n      InputProps,\n      'style' | 'className' | 'onChange' | 'value' | 'multiple' | 'type'\n    >,\n    Pick<\n      InputWrapProps,\n      'reversed' | 'className' | 'style' | 'label' | 'fixedDarkMode'\n    >,\n    Pick<\n      SelectProps<TValidOptionValue, TMultiple, TCancelable>,\n      'options' | 'float' | 'value' | 'multiple' | 'cancelable'\n    > {\n  size?: Size;\n  validation?: ValidateHandler<\n    SelectProps<TValidOptionValue, TMultiple, TCancelable>['value']\n  >;\n  children?: React.ReactNode;\n  onChange?: InnerStateChangeEventHandler<\n    SelectChangeEvent<TValidOptionValue, TMultiple, TCancelable>['value']\n  >;\n}\n\nexport const Selectbox = <\n  TValidOptionValue extends ValidOptionValue = ValidOptionValue,\n  TMultiple extends boolean = false,\n  TCancelable extends boolean = true,\n>({\n  //* Selectbox props\n  size,\n  validation,\n  children,\n\n  //* Input.Wrap props\n  reversed,\n  className,\n  style,\n  label,\n  fixedDarkMode,\n\n  //* Select props\n  options,\n  float,\n  onChange,\n  value,\n  multiple,\n  cancelable,\n\n  //* Input props\n  onClick,\n  ...restInputProps\n}: SelectboxProps<TValidOptionValue, TMultiple, TCancelable>) => {\n  const [selectedValue, setSelectedValue, preventInnerStateChange] =\n    useSubscribedState(value);\n\n  const { disabled, id, readOnly, required } = restInputProps;\n\n  const selectedOption = multiple\n    ? options?.filter(({ value }) =>\n        (selectedValue as TValidOptionValue[])?.includes(value),\n      )\n    : options?.find(({ value }) => value === selectedValue);\n\n  const displayedValue = Array.isArray(selectedOption)\n    ? selectedOption.map(({ label }) => label).join(', ')\n    : selectedOption?.label;\n\n  const { validationMessage, validateOnChange } = useValidationMessage({\n    validateHandler: validation,\n    value: selectedValue,\n    key: id,\n  });\n\n  const {\n    openingState: [opened, setOpened],\n    setClosableOnClick,\n  } = useClosableOnClickOpeningState();\n\n  const setOpenedIfEnabled: typeof setOpened = (value) => {\n    if (readOnly) return;\n    setOpened(value);\n  };\n\n  const decoration = children ?? (\n    <ChevronDown\n      className={cleanClassName(\n        `${styles['selectbox-icon']} ${\n          (float === 'top' ? !opened : opened) && styles.reversed\n        } ${disabled && styles.disabled}`,\n      )}\n    />\n  );\n\n  return (\n    <Input.Wrap\n      validationMessage={validationMessage}\n      size={size}\n      style={style}\n      className={className}\n      reversed={reversed}\n      label={label}\n      required={required}\n      onMouseEnter={() => setClosableOnClick(false)}\n      onMouseLeave={() => setClosableOnClick(true)}\n      fixedDarkMode={fixedDarkMode}\n    >\n      <Input\n        {...restInputProps}\n        type=\"button\"\n        onClick={(e) => {\n          onClick?.(e);\n          setOpenedIfEnabled((prev) => !prev);\n        }}\n        value={displayedValue}\n      />\n      {decoration ? (\n        <div className={styles.decoration}>{decoration}</div>\n      ) : null}\n      <Select\n        opened={opened}\n        options={options}\n        multiple={multiple}\n        value={selectedValue}\n        cancelable={cancelable}\n        float={float}\n        fixedDarkMode={fixedDarkMode}\n        onChange={({ value }) => {\n          onChange?.({\n            value,\n            preventInnerStateChange,\n          });\n          setSelectedValue(value);\n          validateOnChange?.(value);\n          setOpenedIfEnabled(false);\n        }}\n      />\n    </Input.Wrap>\n  );\n};\n"],"names":["useClosableOnClickOpeningState","openingState","useState","opened","setOpened","closable","useEffect","handleClickedOutside","value","Selectbox","size","validation","children","reversed","className","style","label","fixedDarkMode","options","float","onChange","multiple","cancelable","onClick","restInputProps","selectedValue","setSelectedValue","preventInnerStateChange","useSubscribedState","disabled","id","readOnly","required","selectedOption","value2","displayedValue","label2","validationMessage","validateOnChange","useValidationMessage","setClosableOnClick","setOpenedIfEnabled","decoration","jsx","ChevronDown","cleanClassName","styles","jsxs","Input","prev","Select"],"mappings":"sMAEO,MAAMA,EAAiC,IAAM,CAC5C,MAAAC,EAAeC,WAAS,EAAK,EAC7B,CAACC,EAAQC,CAAS,EAAIH,EAE5B,IAAII,EAAW,GAEfC,OAAAA,EAAAA,UAAU,IAAM,CACd,GAAIH,EAAQ,CACV,MAAMI,EAAuB,IAAM,CAC7BF,GAAUD,EAAU,EAAK,CAAA,EAG/B,GAAI,OACK,cAAA,iBAAiB,QAASG,CAAoB,EAC9C,IAAM,OAAO,oBAAoB,QAASA,CAAoB,CAEzE,CACC,EAAA,CAACF,EAAUF,EAAQC,CAAS,CAAC,EAEzB,CACL,aAAAH,EACA,mBAAqBO,GAAmB,CAC3BH,EAAAG,CACb,CAAA,CAEJ,gkCCmBOC,EAAA,CAAA,CAIL,KAAAC,EAEA,WAAAC,EACA,SAAAC,EACA,SAAAC,EAGA,UAAAC,EACA,MAAAC,EACA,MAAAC,EACA,cAAAC,EACA,QAAAC,EAGA,MAAAC,EACA,SAAAC,EACA,MAAAZ,EACA,SAAAa,EACA,WAAAC,EACA,QAAAC,EAGA,GAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,EAAAC,CAAA,EAAAC,EAAApB,CAAA,EAGA,CAAA,SAAAqB,EAAA,GAAAC,EAAA,SAAAC,EAAA,SAAAC,CAAA,EAAAR,EAEAS,EAAAZ,EAAAH,GAAA,YAAAA,EAAA,OACa,CAAA,CAAA,MAAAgB,CAAA,IAAAT,GAAA,YAAAA,EAAA,SAAAS,IAC+ChB,GAAA,YAAAA,EAAA,KAAA,CAAA,CAAA,MAAAgB,KAAAA,IAAAT,GAI5DU,EAAA,MAAA,QAAAF,CAAA,EAAAA,EAAA,IAAA,CAAA,CAAA,MAAAG,CAAA,IAAAA,CAAA,EAAA,KAAA,IAAA,EAAAH,GAAA,YAAAA,EAAA,MAIA,CAAA,kBAAAI,EAAA,iBAAAC,CAAA,EAAAC,EAAA,CAAqE,gBAAA5B,EAClD,MAAAc,EACV,IAAAK,CACF,CAAA,EAGP,CAAM,aAAA,CAAA3B,EAAAC,CAAA,EAC4B,mBAAAoC,CAChC,EAAAxC,EAAA,EAGFyC,EAAAP,GAAA,CACEH,GACA3B,EAAA8B,CAAA,CAAe,EAGjBQ,EAAA9B,GAAA+B,EAAA,IACEC,EAAC,CAAA,UAAAC,EACY,GAAAC,EAAA,gBAAA,CAAA,KAAA3B,IAAA,MAAA,CAAAhB,EAAAA,IAAA2C,EAAA,QAAA,IAAAjB,GAAAiB,EAAA,QAAA,EAGsB,CACjC,CAAA,EAIJ,OAAAC,EAAA,KACEC,EAAA,KAAO,CAAN,kBAAAX,EACC,KAAA3B,EACA,MAAAK,EACA,UAAAD,EACA,SAAAD,EACA,MAAAG,EACA,SAAAgB,EACA,aAAA,IAAAQ,EAAA,EAAA,EAC4C,aAAA,IAAAA,EAAA,EAAA,EACD,cAAAvB,EAC3C,SAAA,CAEA0B,EAAA,IAAAK,EAAC,CAAA,GAAAxB,EACK,KAAA,SACC,QAAA,GAAA,CAEHD,GAAA,MAAAA,EAAA,GACAkB,EAAAQ,GAAA,CAAAA,CAAA,CAAkC,EACpC,MAAAd,CACO,CAAA,EACTO,EAAAC,EAAAA,IAAA,MAAA,CAAA,UAAAG,EAAA,WAAA,SAAAJ,CAAA,CAAA,EAAA,KAGIC,EAAA,IACJO,EAAC,CAAA,OAAA/C,EACC,QAAAe,EACA,SAAAG,EACA,MAAAI,EACO,WAAAH,EACP,MAAAH,EACA,cAAAF,EACA,SAAA,CAAA,CAAA,MAAAiB,KAAA,CAEEd,GAAA,MAAAA,EAAA,CAAW,MAAAc,EACT,wBAAAP,CACA,GAEFD,EAAAQ,CAAA,EACAI,GAAA,MAAAA,EAAAJ,GACAO,EAAA,EAAA,CAAwB,CAC1B,CAAA,CACF,CAAA,CAAA,CAGN"}