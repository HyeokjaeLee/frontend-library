{"version":3,"file":"index-64bfddf0.js","sources":["../../../src/components/atoms/InputContainer/index.tsx","../../../src/components/atoms/Input/index.tsx"],"sourcesContent":["import { createContext, useContext } from 'react';\n\nimport styles from './index.module.scss';\nimport { cleanClassName } from '../../../utils';\n\ninterface CommonProps {\n  children?: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nexport interface InputContainerProps extends CommonProps {\n  validationMessage?: string | null;\n}\n\nconst InputContainerContext =\n  createContext<InputContainerProps['validationMessage']>(undefined);\n\nconst InputContainerMain = ({\n  children,\n  className,\n  validationMessage,\n  style,\n}: InputContainerProps) => (\n  <div\n    style={style}\n    className={cleanClassName(`${styles['input-container']} ${className}`)}\n  >\n    <InputContainerContext.Provider value={validationMessage}>\n      <div className={styles['input-interaction-wrap']}>{children}</div>\n    </InputContainerContext.Provider>\n    {validationMessage ? (\n      <p className={styles['validation-message']}>{validationMessage}</p>\n    ) : (\n      validationMessage === null && (\n        <div className={styles['validation-space']} />\n      )\n    )}\n  </div>\n);\n\nexport interface InputContainerIntreractionProps extends CommonProps {\n  onClick?: React.HTMLAttributes<HTMLDivElement>['onClick'];\n  size?: 'small' | 'medium' | 'large';\n  theme?: 'light' | 'dark';\n  readonly?: boolean;\n}\n\nconst InputContainerIntreraction = ({\n  children,\n  onClick,\n  size = 'medium',\n  className,\n  style,\n  theme = 'light',\n  readonly = false,\n}: InputContainerIntreractionProps) => {\n  const validationMessage = useContext(InputContainerContext);\n  return (\n    <div\n      style={style}\n      className={cleanClassName(\n        `${styles['input-wrap']} ${styles[theme]} ${\n          readonly && styles.readonly\n        } ${validationMessage && styles.error} ${\n          styles[`size-${size}`]\n        } ${className}`,\n      )}\n      onClick={onClick}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport const InputContainer = Object.assign(InputContainerMain, {\n  Intreraction: InputContainerIntreraction,\n});\n","import type { Ref } from 'react';\nimport { useState, useMemo, forwardRef } from 'react';\n\nimport styles from './index.module.scss';\nimport { cleanClassName } from '../../../utils';\n\nexport interface InputProps\n  extends Pick<\n    React.DetailedHTMLProps<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      HTMLInputElement\n    >,\n    'placeholder' | 'onFocus' | 'id' | 'onClick' | 'style'\n  > {\n  type?:\n    | 'text'\n    | 'number'\n    | 'large-number'\n    | 'phone-number'\n    | 'password'\n    | 'button';\n  value?: number | string;\n  disabled?: boolean;\n  onChange?: (value: string) => void;\n  ref?: Ref<HTMLInputElement>;\n  name?: string;\n  className?: string;\n}\n\nexport const Input: (props: InputProps) => JSX.Element | null = forwardRef(\n  (\n    {\n      type = 'text',\n      placeholder = '',\n      disabled = false,\n      value,\n      onChange,\n      onClick,\n      id,\n      onFocus,\n      name,\n      className,\n      style,\n    },\n    ref,\n  ) => {\n    const [isFocused, setIsFucused] = useState(false);\n\n    const formatedValue = (() => {\n      if (type === 'button' && !value) return placeholder;\n\n      if (value !== 0 && !value) return '';\n\n      const valueString = String(value);\n\n      if (isFocused) return valueString;\n\n      switch (type) {\n        case 'number':\n          return valueString;\n\n        case 'large-number':\n          return Number(valueString).toLocaleString();\n\n        case 'phone-number':\n          if (valueString.length === 10)\n            return valueString.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3');\n          return valueString.replace(/(\\d{3})(\\d{4})(\\d{4})/, '$1-$2-$3');\n\n        default:\n          return valueString;\n      }\n    })();\n\n    const convertChangeHandlerParam = useMemo((): ((\n      value: string,\n    ) => string) => {\n      const leftOnlyNumber = (value: string) => value.replace(/[^0-9]/g, '');\n      switch (type) {\n        case 'number':\n        case 'large-number':\n          return (value) => value && leftOnlyNumber(value);\n\n        case 'phone-number':\n          return (value) => {\n            let numberString = leftOnlyNumber(value);\n            if (numberString.length > 11)\n              numberString = numberString.slice(0, 11);\n\n            return value && numberString;\n          };\n\n        default:\n          return (value) => value;\n      }\n    }, [type]);\n\n    return (\n      <input\n        id={id}\n        name={name}\n        ref={ref}\n        onFocus={(e) => {\n          setIsFucused(true);\n          onFocus?.(e);\n        }}\n        onBlur={() => setIsFucused(false)}\n        type={type}\n        placeholder={placeholder}\n        onClick={onClick}\n        value={formatedValue}\n        style={style}\n        className={cleanClassName(\n          `${styles.input} ${type === 'button' && styles.button} ${\n            value || styles.empty\n          } ${styles['default-width']} ${className}`,\n        )}\n        disabled={!!disabled}\n        onChange={({ target: { value } }) =>\n          onChange?.(convertChangeHandlerParam(value))\n        }\n      />\n    );\n  },\n);\n"],"names":["InputContainerContext","createContext","InputContainerMain","children","className","validationMessage","style","jsxs","cleanClassName","styles","jsx","InputContainerIntreraction","onClick","size","theme","readonly","useContext","InputContainer","Input","forwardRef","type","placeholder","disabled","value","onChange","id","onFocus","name","ref","isFocused","setIsFucused","useState","formatedValue","valueString","convertChangeHandlerParam","useMemo","leftOnlyNumber","value2","numberString","e"],"mappings":"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"}