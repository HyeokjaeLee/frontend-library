{"version":3,"file":"index-1c39f0fc.js","sources":["../../../src/components/atoms/Button/index.tsx"],"sourcesContent":["import { useDarkMode, useButtonDelay } from '@hooks';\nimport type { HTMLTagProps } from '@types';\nimport { cleanClassName } from '@utils';\n\nimport styles from './index.module.scss';\n\ntype Theme =\n  | 'primary'\n  | 'secondary'\n  | 'success'\n  | 'warning'\n  | 'danger'\n  | 'clear'\n  | 'ghost';\n\nexport interface ButtonProps extends HTMLTagProps<'button'> {\n  delay?: number;\n  size?: 'small' | 'medium' | 'large';\n  theme?: Theme;\n  icon?: React.ReactNode;\n  iconDirection?: 'left' | 'right';\n  shape?: 'sharp-corner' | 'rounded' | 'pill';\n}\n\nexport const Button = ({\n  //* Button props\n  delay,\n  size = 'medium',\n  theme = 'primary',\n  shape = 'rounded',\n  iconDirection = 'left',\n  icon,\n\n  //* HTML button props\n  type = 'button',\n  children,\n  disabled,\n  className,\n  ...restButtonProps\n}: ButtonProps) => {\n  const { isDelayButton, isDelaying } = useButtonDelay({\n    delay,\n    disabled,\n  });\n\n  const childrenType = (() => {\n    if (icon && children) return 'both';\n    return icon ? 'icon' : 'text';\n  })();\n\n  const isDisabled = disabled || isDelayButton;\n\n  const { isDarkMode } = useDarkMode();\n\n  return (\n    <button\n      {...restButtonProps}\n      type={type}\n      className={cleanClassName(\n        `${isDelayButton ? styles['delayed-button'] : styles.button} ${\n          styles[`shape-${shape}`]\n        } ${styles[`size-${size}`]} ${\n          styles[`icon-direction-${iconDirection}`]\n        } ${styles[`children-type-${childrenType}`]} ${styles[theme]} ${\n          isDarkMode && theme === 'clear' && styles.dark\n        } ${className}`,\n      )}\n      disabled={isDisabled}\n    >\n      {delay && isDelayButton ? (\n        <div\n          className={`${styles['delay-bar']} ${isDelaying && styles.delaying}`}\n          style={{ transition: `transform ${delay / 1000}s linear` }}\n        />\n      ) : null}\n      {children && <div className={styles['button-content']}>{children}</div>}\n      {icon ? (\n        <div className={`${styles['button-content']} ${styles.icon}`}>\n          {icon}\n        </div>\n      ) : null}\n    </button>\n  );\n};\n"],"names":["Button","delay","size","theme","shape","iconDirection","icon","type","children","disabled","className","restButtonProps","isDelayButton","isDelaying","useButtonDelay","childrenType","isDisabled","isDarkMode","useDarkMode","jsxs","cleanClassName","styles","jsx"],"mappings":"wtDAwBOA,EAAA,CAAA,CAAgB,MAAAC,EAErB,KAAAC,EAAA,SACO,MAAAC,EAAA,UACC,MAAAC,EAAA,UACA,cAAAC,EAAA,OACQ,KAAAC,EAChB,KAAAC,EAAA,SAGO,SAAAC,EACP,SAAAC,EACA,UAAAC,EACA,GAAAC,CAEF,IAAA,CACE,KAAA,CAAA,cAAAC,EAAA,WAAAC,CAAA,EAAAC,EAAA,CAAqD,MAAAb,EACnD,SAAAQ,CACA,CAAA,EAGFM,GAAA,IACET,GAAAE,EAAsB,OACtBF,EAAA,OAAA,UAGFU,EAAAP,GAAAG,EAEA,CAAA,WAAAK,GAAAC,IAEA,OAAAC,EAAA,KACE,SAAC,CAAA,GAAAR,EACK,KAAAJ,EACJ,UAAAa,EACW,GAAAR,EAAAS,EAAA,gBAAA,EAAAA,EAAA,UAAAA,EAAA,SAAAjB,GAAA,KAAAiB,EAAA,QAAAnB,GAAA,KAAAmB,EAAA,kBAAAhB,GAAA,KAAAgB,EAAA,iBAAAN,GAAA,KAAAM,EAAAlB,CAAA,KAAAc,GAAAd,IAAA,SAAAkB,EAAA,QAAAX,GAOL,EACN,SAAAM,EACU,SAAA,CAETf,GAAAW,EAAAU,EAAA,IACC,MAAC,CAAA,UAAA,GAAAD,EAAA,WAAA,KAAAR,GAAAQ,EAAA,WAC2D,MAAA,CAAA,WAAA,aAAApB,EAAA,aAAA,CACD,CAAA,EAAA,KAEzDO,GAAAc,EAAAA,IAAA,MAAA,CAAA,UAAAD,EAAA,gBAAA,EAAA,SAAAb,EAAA,EAC6DF,EAAAgB,EAAA,IAAA,MAAA,CAAA,UAAA,GAAAD,EAAA,gBAAA,KAAAA,EAAA,OAAA,SAAAf,CAAA,CAAA,EAAA,IAK7D,CAAA,CAAA,CAGV"}